<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux 下 IDEA 的 Ctrl+Alt+S</title>
    <url>/idea-ctrl-alt-s/</url>
    <content><![CDATA[<p align="center"><br>    <img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190917175139.jpg" class="full-class"><br></p>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是个困扰我一年多的问题，今天终于解决了……<br><a id="more"></a></p>
<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>一年前将主系统换成 Arch Linux 后，其他一切正常就是 IDEA 的打开设置的快捷键 ctrl+alt+s 失效，让我很是头疼。虽然不是很重要，但是对于我这种强迫症来说别提多难受了……</p>
<p>我曾多次在设置里的快捷键查找 Ctrl+Alt+S，每次无功而返。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>今天在群里闲聊到 Linux 下 IDEA 的快捷键问题，一位大佬就发了一张解决方案的截图给了我新的思路。</p>
<p><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190917172104.jpg" alt></p>
<p>Linux 万物皆是文件</p>
<p>倾向于系统文件快捷键的占用，所以我下载了 dconf-editor 去更改快捷键的文件。不幸的是看上去并没有什么问题，文件显示层叠窗口的快捷键并没有被设置。打开搜狗输入法以及 Konsole 也都没有发现 Ctrl+Alt+S 的痕迹，那为什么会被占用呢？百思不得其解……</p>
<p>想起了之前加入 TG 上的 Arch Linux 官方群组，就去上面将问题描述了一遍。一分钟后，大佬告诉我是因为 fcitx 的全局快捷键，Ctrl+Alt+S 被设置成保存所有设置和历史。</p>
<p><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190917173543.png" alt></p>
<p>收到回复后，我一想那简单啊，修改配置文件不就完了……<br>天真的把 S 改成 Q，重新登录发现并没有什么卵用。定睛一看前面还有 # 号（吐血.jpg）……改成下面这样重启登录就解决了。</p>
<p><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190917174122.png" alt></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>gnome 可以下载 dconf-editor 去查找快捷键有没有被默认系统设置占用，kde 只需在设置里查找是否有重复的快捷键即可</li>
<li>看看是不是因为输入法的框架是 fctix，是的话修改 fctix 的配置文件，将保存所有设置的快捷键改成其他键位</li>
<li>直接改 IDEA 的快键键不好么？？？</li>
</ol>
<p>这个快捷键终于解决了，让我心情很舒畅！！！希望今后能帮助到其他人。</p>
]]></content>
      <categories>
        <category>日常记录</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>排错</tag>
        <tag>踩坑</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次线上 Bug 献给了 ThreadLocal</title>
    <url>/threadloacl/</url>
    <content><![CDATA[<p align="center"><br>    <img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190901142031.jpeg
" class="full-class"><br></p>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>捂脸.jpg</p>
<a id="more"></a>
<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p><a href="https://yi-yun.github.io/Mybatis-Interceptor/">这篇博文</a>说到的用了 Mybatis 做拦截器来记录产品以及运营变更后台内容的操作信息。本来直接在后台管理的模块操作就可以了，但是有个要求是记录操作前后的信息……因为公司大都是微服务采用的单数据源，操作人信息是在 A 服务，变更前后的信息是在 B 服务。</p>
<p>一开始接到任务的时候就感觉不好搞，这不是坑爹嘛直接拦截 Controller 的日志多好（小声）</p>
<p>经过与大佬的深入探讨，有两个技术方案。这里为了长话短说，就只讲最终实现的技术方案。</p>
<p><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190901132722.png" alt></p>
<p>我需要在 RPC API 中加个字段来传递操作人的真实信息以及客户端 IP，B 服务接收到后通过 ThreadLocal 传递到 DAO 层，最后拦截器先去数据库查询出旧值，然后执行原来的方法，最后拼接旧值以及新值，日志入库。</p>
<p>这个方案很完美有没有，嗯如果没有 Bug 就很完美。</p>
<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>经过几天的开发、提测、测试通过、上线了。</p>
<p>上线半小时，导师通过 kibana 观察线上的日志发现并没有什么问题。看一眼线上的数据库，卧槽记录了几张不用记录的表，操作人信息怎么都是一样的，功能倒是写的没问题，就是似乎将所有业务的增删改特定的方法都记录了……</p>
<h2 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h2><p>下面是段很有意思的对话</p>
<p>我：为什么能获取到操作人的信息，如果 A 系统没带过来的话，B 中心服务所有的操作为什么会带有脏信息……<br>导师：你这写的有问题啊？<br>我：是啊，OS：代码不都给你 review 过了么（逃）<br>导师：你是不是用了 ThreadLocal<br>我小鸡啄米似的点头<br>导师：讲道理线程调用结束了 ThreadLocal 不就被回收了么？<br>我：是啊是啊</p>
<p>随后导师看着逐渐增加的日志记录表陷入了沉思，我也陷入了思考……</p>
<p>突然灵光乍现，因为没有在拦截器的拦截方法里 remove 掉 ThreadLocal，肯定有个线程池调用了，那为什么有线程池呢？哦艹，Dubbo 默认有线程池……我没有 remove 掉，管理操作后台如果有操作可能会污染到所有线程。</p>
<h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>因为只是增加了记录日志数量，所以大佬们似乎并不急于修复数据让我先自己在本地复现一下确定原因。<br>我把 Dubbo 线程池的数目调成 1， DeBug 模拟登录复现了场景。Dubbo 通过线程池来处理提供 provider 的服务，如果我没有 remove 掉的话会导致相关信息一直在，GC 回收时会产生内存泄漏</p>
<h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>ThreadLocal remove 掉需要用 finally 代码块，侵入性太强，经过短暂的讨论决定新版本用注解add 以及 remove 掉 ThreadLocal，暂时的解决方案是注释掉拦截器。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>那天加班到了九点，第一次遇到线上的 bug 有点猝不及防。</p>
<p>虽然我知道 ThreadLocal 需要 remove，但是想当然以为没有线程池调用就不会有问题。<br>是啊没有线程池调用是没啥问题，但最骚的是忽略了 Dubbo 内部有个默认的线程池去提供服务。有了理论基础还是要有实践经验，不然容易出问题。</p>
<p>庆幸我是实习生，不然绩效就是 C 了（手动狗头）</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>实习</tag>
        <tag>排错</tag>
        <tag>第一次</tag>
        <tag>Bug</tag>
      </tags>
  </entry>
  <entry>
    <title>人人都能拥有的广告位</title>
    <url>/google-ads/</url>
    <content><![CDATA[<p align="center"><br>    <img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190813211435.jpg" class="full-class"><br></p>


<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此篇是本博客引入 Google 广告的过程<br>算是教程吧<br>开通完之后记得把广告插件关了看下效果<br><a id="more"></a></p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>一个稳定的 VPN<br>不稳定也行，注册卡顿你不介意就行……</li>
<li>一个博客<br>要原创几篇文章，我猜是人工审核吧</li>
<li>一个 Google 账号</li>
</ul>
<h2 id="申请开通"><a href="#申请开通" class="headerlink" title="申请开通"></a>申请开通</h2><ol>
<li><a href="https://www.google.cn/adsense/start/#/?modal_active=none" target="_blank" rel="noopener">传送门</a></li>
<li>将谷歌提供的代码扔在 head 里，因为我的博客是 <code>hexo v6.0</code>，所以将验证代码扔在了 <code>themes/next/layout/_custom/head.swig</code> 里面，这样之后主题升级会更加平滑</li>
<li>验证完后，等两三天，审核通过就可以了</li>
</ol>
<p>友情提醒：新站不容易过审</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="自动广告"><a href="#自动广告" class="headerlink" title="自动广告"></a>自动广告</h3><p>没玩过，据说是 Google 爸爸根据网站长宽比投放的，投放率很低。</p>
<h3 id="广告单元"><a href="#广告单元" class="headerlink" title="广告单元"></a>广告单元</h3><p>这是今天要讲的关键部分，点击想要投放的广告样式后会获得相应的代码。</p>
<p><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190813201757.png" alt></p>
<h4 id="展示广告"><a href="#展示广告" class="headerlink" title="展示广告"></a>展示广告</h4><p>将代码插入到 <code>themes/next/layout/_macro/sidebar.swig</code> 文件中 <code>&lt;div class=”sidebar-inner”&gt; &lt;/div&gt;</code> 标签包裹着的最下部。</p>
<h4 id="信息流广告"><a href="#信息流广告" class="headerlink" title="信息流广告"></a>信息流广告</h4><p>类似知乎推荐、QQ 空间信息流式中的广告，扔太多地方不好就没研究了。</p>
<h4 id="文章内嵌广告"><a href="#文章内嵌广告" class="headerlink" title="文章内嵌广告"></a>文章内嵌广告</h4><p>可以放在文章尾部，代码往 <code>themes/next/layout/_macro/post.swig</code> 一扔就行</p>
<p>PS：不过得注意位置我扔在这里，大佬们可根据自己博客在浏览器 F12 选位置嵌代码。<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/TIM%E6%88%AA%E5%9B%BE20190814092129.png" alt></p>
<p>后来发现内嵌广告太大，就改成了展示广告的横幅版了……</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>一般 Chrome 或者 FireFox 都会装广告屏蔽插件，手机浏览器应该不会被屏蔽，所以一般也不会有人点。（那为啥要装？<del>人总要有梦想，万一有人问了呢</del>）</p>
<p>游客点一下根据广告质量来算钱，有点一下 0.14 刀的也有 0.07 刀的，广告点满一百刀才能提现。不过别想着薅羊毛，容易被封号。据大佬们说广告点满十刀后还会又自检，还是希望不要舍本逐末吧。</p>
<p>最后，大佬们，关掉广告插件帮我点个广告可好～</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>广告</tag>
        <tag>Google</tag>
        <tag>钱</tag>
      </tags>
  </entry>
  <entry>
    <title>一次愉快但被完爆的面试</title>
    <url>/interview-ebay/</url>
    <content><![CDATA[<p align="center"><br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190810152950.jpeg" class="full-image"><br></p>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一个月前的实习生面试，面试过程很愉快，面试官很和蔼。但一个月后复盘，发现并没有回答到点子上，如果我是面试官，我也不会要这么一个人。</p>
<a id="more"></a>
<h2 id="红黑树与-AVL-树的区别"><a href="#红黑树与-AVL-树的区别" class="headerlink" title="红黑树与 AVL 树的区别"></a>红黑树与 AVL 树的区别</h2><h3 id="红黑树的定义"><a href="#红黑树的定义" class="headerlink" title="红黑树的定义"></a>红黑树的定义</h3><ul>
<li>两个节点颜色只有红黑两种</li>
<li>根和叶子节点都为黑色</li>
<li>两个红节点不相连</li>
<li>路径上的黑节点数一致</li>
</ul>
<p>AVL 强制左右子树高度相差为 1，平衡代价比红黑树大</p>
<h2 id="LinkedList-与-ArrayList-的区别"><a href="#LinkedList-与-ArrayList-的区别" class="headerlink" title="LinkedList 与 ArrayList 的区别"></a>LinkedList 与 ArrayList 的区别</h2><p>（也就是数组与链表的区别）</p>
<ul>
<li>数组需要连续的地址空间</li>
<li>数组支持随机访问下标</li>
<li>还问了插入的话哪个快</li>
</ul>
<h2 id="Spring-代理"><a href="#Spring-代理" class="headerlink" title="Spring 代理"></a>Spring 代理</h2><h3 id="如何实现-JDK-代理"><a href="#如何实现-JDK-代理" class="headerlink" title="如何实现 JDK 代理"></a>如何实现 JDK 代理</h3><h3 id="Spring-五种隔离级别"><a href="#Spring-五种隔离级别" class="headerlink" title="Spring 五种隔离级别"></a>Spring 五种隔离级别</h3><blockquote>
<p>这一块答上来了，但是都是错的，春天的面试太失败了</p>
</blockquote>
<ul>
<li>数据库的四种级别</li>
<li>后端数据库默认的事务<br>Mysql 默认采用的 <code>REPEATABLE_READ</code> 隔离级别 Oracle 默认采用的 <code>READ_COMMITTED</code> 隔离级别.</li>
</ul>
<h3 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h3><p>这一块面试官应该想问，可重复读隔离级别如何消除不可重复读，但被我糊弄过去了。另外，RR 级别可以消除当前读的幻读。当然这些都是之后才学习到。</p>
<h3 id="如何实现事务"><a href="#如何实现事务" class="headerlink" title="如何实现事务"></a>如何实现事务</h3><p>底层采用的还是 JDBC 的事务，只不过用动态代理以及注解的方式代理，抽出来往下看的话就是 TransactionManager 提供的 commit、rollback、close 的方法。</p>
<h2 id="单点登录的流程"><a href="#单点登录的流程" class="headerlink" title="单点登录的流程"></a>单点登录的流程</h2><h2 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h2><p>底层的结构是 FIFO 队列。线程进来先去竞争锁，竞争不到将线程扔到队尾自旋。一旦锁释放，若非公平锁，头结点后面的节点会通过自旋获得锁。</p>
<h2 id="软链接与硬链接的区别"><a href="#软链接与硬链接的区别" class="headerlink" title="软链接与硬链接的区别"></a>软链接与硬链接的区别</h2><ul>
<li>软链接<br>快捷方式</li>
<li>硬链接<br>复制一份相同的 inode 号以及权限，并且计数器 +1，另外硬链接的文件必须存在无法对目录硬链接。硬链接不能在不同文件系统中使用。</li>
</ul>
<h2 id="Maven-依赖命令行查看"><a href="#Maven-依赖命令行查看" class="headerlink" title="Maven 依赖命令行查看"></a>Maven 依赖命令行查看</h2><p>我应该答，可以通过 <code>mvn -h</code> 的方式看看</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>未来</tag>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis 拦截器的简单实现</title>
    <url>/Mybatis-Interceptor/</url>
    <content><![CDATA[<p align="center"><br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190804164802.jpg
" class="full-image"><br></p>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>需求驱动学习，最近一周组长让我在业务模块里加日志，经过与导师以及组长讨论决定用拦截器记录日志。周五下班前已经发了提测邮件。</p>
<p>虽然我知道 MyBatis 有这东西，但是没在实际情况中用过，心里有点虚2333……所以才有了此文的理解。</p>
<a id="more"></a>
<h2 id="前世今生"><a href="#前世今生" class="headerlink" title="前世今生"></a>前世今生</h2><p>它的本质就是 JDK 的动态代理。首先先来复习一下动态代理我贴了一段最常见的 JDK 动态代理的代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务员的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Waiter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">serve</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//服务员的实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaiterImpl</span> <span class="keyword">implements</span> <span class="title">Waiter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务中..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需要代理的对象处理器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaitInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Waiter waiter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WaitInvocationHandler</span><span class="params">(Waiter waiter1)</span> </span>&#123;</span><br><span class="line">        waiter = waiter1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"你好"</span>);</span><br><span class="line">        Object invoke = method.invoke(waiter, args);</span><br><span class="line">        System.out.println(<span class="string">"再见"</span>);</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="comment">//普通的实现</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Waiter waiter = <span class="keyword">new</span> WaiterImpl();</span><br><span class="line">        waiter.serve();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Waiter a = <span class="keyword">new</span> WaiterImpl();</span><br><span class="line">        ClassLoader classLoader = getClass().getClassLoader();</span><br><span class="line">        Class[] classes = &#123;Waiter<span class="class">.<span class="keyword">class</span>&#125;</span>;</span><br><span class="line">        <span class="comment">//生成代理对象</span></span><br><span class="line">        Waiter waiterproxy = (Waiter) Proxy.newProxyInstance(classLoader, classes, <span class="keyword">new</span> WaitInvocationHandler(a));</span><br><span class="line">        waiterproxy.serve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><h3 id="V1"><a href="#V1" class="headerlink" title="V1"></a>V1</h3><p>我现在要在函数执行前后记录日志操作，考虑需要在代理方法那里定义个拦截器的接口，如下代码所示<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//拦截器 V1 版本</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterceptorV1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">interceptor</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理对象变成这个</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetProxyV1</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Target target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MyInterceptorV1 myInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TargetProxyV1</span><span class="params">(Target target, MyInterceptorV1 myInterceptor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">        <span class="keyword">this</span>.myInterceptor = myInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        myInterceptor.interceptor();</span><br><span class="line">        <span class="keyword">return</span> method.invoke(target, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这是最简单的版本，但是我们很多时候需要拦截参数等根据参数判断拦不拦截等，代码更新如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterceptorV1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">interceptor</span><span class="params">(Method method, Object[] args)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    myInterceptor.interceptor(method, args);</span><br><span class="line">    <span class="keyword">return</span> method.invoke(target, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="V2"><a href="#V2" class="headerlink" title="V2"></a>V2</h3><p>似乎上面的方案很完美 <del>废话肯定不完美，不然怎么会有这段</del></p>
<p>没错，第二段代码并不是很优雅，有方法参数重复，可以考虑将三者抽出来，直接在拦截器的实现里写上<code>method.invoke(target, args);</code>，如下代码所示<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">public class MyInvocation &#123;</span><br><span class="line">    private Object target;</span><br><span class="line">    private Method method;</span><br><span class="line">    private Object[] args;</span><br><span class="line"></span><br><span class="line">    public Object proceed() throws InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        return method.invoke(target, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//没错这就是 V2 版本</span><br><span class="line">public interface MyInterceptorV2 &#123;</span><br><span class="line">    Object interceptor(MyInvocation invocation) throws Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Mybatis 的拦截器就是像我上面这么写的，<del>名字也跟我取得一样，</del>只是它更加复杂，能够通过注解区分拦截 <code>update</code> 操作和 <code>query</code> 等操作。</p>
<p>既完成了任务又巩固了原来的知识，这种感觉很棒，最关键的是还有钱拿……</p>
<p><a href="https://github.com/yi-yun/JavaExercise/blob/master/java_se/src/main/java/com/yiyun/proxy/mybatis/App.java" target="_blank" rel="noopener">本文代码</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>学习</tag>
        <tag>Mybatis</tag>
        <tag>Interceptor</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>01 背包</title>
    <url>/ZeroOnePack/</url>
    <content><![CDATA[<p align="center"><br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190721194301.jpeg" class="full-image"><br></p>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>异常有名的背包问题，终于有勇气面对它了。<br>三年前学数据结构算法的时候，那时候也不懂，参考的很多博客文章没有例子，都是数学公式生硬地出来，而且写法各种各样，导致一直没有勇气去接触这些。</p>
<a id="more"></a>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote>
<p>在 n 个物品中挑选若干物品装入背包，最多能装多满？假设背包的大小为 w，每个物品的大小为 A[i]</p>
</blockquote>
<h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">样例 1:</span><br><span class="line">	输入:  [3,4,8,5], backpack size=10</span><br><span class="line">	输出:  9</span><br><span class="line"></span><br><span class="line">样例 2:</span><br><span class="line">	输入:  [2,3,5,7], backpack size=12</span><br><span class="line">	输出:  12</span><br></pre></td></tr></table></figure>
<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>最简单的动态规划做法是将过程分为 n 个阶段，每个阶段决策是否将物品放入背包中。记住，动态规划的本质就是通过数组存储状态。</p>
<p>请看下面的例子，这是现在我拥有的东西以及条件<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] weight = &#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>&#125;;<span class="comment">// 物品重量</span></span><br><span class="line"><span class="keyword">int</span> w = <span class="number">9</span>; <span class="comment">// 背包承受的最大重量</span></span><br></pre></td></tr></table></figure></p>
<p>我们需要通过这些来构建出一个二维数组 <code>states[n][w+1]</code> 记录状态。states[i][j] 表示第 i 个做完决策后，背包容量 j 能放多少价值。这道题目物品的价值与物品的重量相等。</p>
<ul>
<li>为什么数组是 w+1？<br>数组边界可以取到 w 意味着 <code>states[][w]</code> 可以表示装满背包时的总价值是多大。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">backPack2D</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//求出物品个数</span></span><br><span class="line">    <span class="keyword">int</span> n = A.length;</span><br><span class="line">    <span class="keyword">int</span>[][] states = <span class="keyword">new</span> <span class="keyword">int</span>[n][m + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">//初始化 states[0][]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = A[<span class="number">0</span>]; i &lt;= m; i++) &#123;</span><br><span class="line">        states[<span class="number">0</span>][i] = A[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="comment">//当不把物品放入背包，将上一层的数值拷贝过来</span></span><br><span class="line">            <span class="keyword">if</span> (states[i - <span class="number">1</span>][j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                states[i][j] = states[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//决策将物品放入背包，取最大值</span></span><br><span class="line">        <span class="comment">//注意这里 j 的范围</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            states[i][j + A[i]] = Math.max(states[i][j + A[i]], states[i][j] + A[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> states[n - <span class="number">1</span>][m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><p>重量数组<code>{2,2,4,6,3}</code>，代码更新数组如下<br>new 数组时的状态</p>
<p> <img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190721184105.png" alt></p>
</li>
<li><p>初始化数组，第 0 个物品决策<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190721184752.png" alt></p>
</li>
<li>第（i=1）个物品决策完后数组状态<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190721185037.png" alt></li>
<li>第（i=2）个物品决策完后数组状态<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190721185234.png" alt></li>
<li>第（i=3）个物品决策完后数组状态<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190721185545.png" alt></li>
<li>第（i=4）个物品决策完后数组状态<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190721185834.png" alt></li>
</ol>
<p><code>states[i][j]</code> 表示第 i 个物品决策完后，容量为 j 的背包里最多能放多少价值的物品，所以最后返回 <code>states[n-1][m]</code> 即可</p>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>上述解法用到了一个二维数组，其实我们还能进一步地优化空间<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">backPack</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = A.length;</span><br><span class="line">    <span class="keyword">int</span>[] states = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">//注意这里倒着遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = m - A[i]; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            states[A[i] + j] = Math.max(states[A[i] + j], states[j] + A[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> states[m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>解释一下倒着遍历的那里以及 j 的范围</p>
<ul>
<li>如果正序遍历，后面的值有可能直接被前面的覆盖了，当遍历到覆盖的值的时候，此时当前数组元素的值并不是从上面一行数组 copy 下来的，而是通过 max 计算出来的</li>
<li>j 的范围有两种，第一种是 m 到 A[i]，可以理解为要更新的数组状态；第二种是 m-A[i] 到 0，可以理解为遍历前序数组，更新尾部的数组。虽然两种理解代码不一样，但是结果一致。<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190721191918.png" alt></li>
</ul>
<h2 id="01-背包升级版"><a href="#01-背包升级版" class="headerlink" title="01 背包升级版"></a>01 背包升级版</h2><p>加上了 value 数组，我将链接以及 AC 代码贴在这里，希望对你有所帮助</p>
<ul>
<li><a href="https://www.lintcode.com/problem/backpack-ii/" target="_blank" rel="noopener">题目链接</a></li>
<li>代码  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">backPackII2</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span>[] A, <span class="keyword">int</span>[] V)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = A.length;</span><br><span class="line">    <span class="keyword">int</span>[] states = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = m - A[i]; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            states[j + A[i]] = Math.max(states[j] + V[i], states[j + A[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> states[m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><ul>
<li>恰好装满与尽量装满<ul>
<li>恰好装满需要将数组初始化为  0,-1,-1,-1,-1……</li>
<li>尽量装满只需要 0,0,0,0……</li>
</ul>
</li>
</ul>
<p>原因的话偷个懒，上一个背包九讲的图<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190721192914.png" alt></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>01 背包是动态规划的入门，需要静下心来仔细想一步步 DeBug，收获会很大。很多题目都是基于 01 背包的变种。<br>江湖艰险，希望此文会对你有所帮助！</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>LintCode</tag>
        <tag>背包</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>实习杂谈</title>
    <url>/Intern/</url>
    <content><![CDATA[<p align="center"><br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190630203324.jpeg" class="full-image"><br></p>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在正在大学城的图书馆敲着文字，周围是北大清华哈工大的研究生，让我这个双非本科的瑟瑟发抖……</p>
<a id="more"></a>
<h2 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h2><h3 id="城市"><a href="#城市" class="headerlink" title="城市"></a>城市</h3><p>首先说说深圳这座城市给我带来的最大感受吧</p>
<ul>
<li>热<br>刚下火车扑面而来的是一阵热风，让我这个南方人体验到了真正的潮热</li>
<li>多<br>在这个 2000 平方公里的城市，居住人口超过 2000 万，报道的那天就让我感受到了拥挤，几乎是一站一辆公交车都满足不了出行，加上上下班地铁限流，简直是要人命</li>
<li>新<br>建筑大都很现代化，像是杭州滨江</li>
</ul>
<h3 id="公司"><a href="#公司" class="headerlink" title="公司"></a>公司</h3><p>随手科技在著名的南山区金蝶软件园 B 幢，大概有 4、5、6、7、8 楼吧<del>（萌新入职才一周，不是很清楚，见谅）</del></p>
<p>新人入职两周不让碰源码，要看两周文档，下周培训。不过文档内容和规范真的丰富，同事沟通、请假以及项目管理都有内部的软件。</p>
<p>周二、周四有下午茶，晚上加班到十点能打车，每个月有生(qiang)日(dan)会(gao)，福利比杭州某公司多了一点……<del>，除了钱给的稍微不够了点。</del></p>
<p>导师待我还不错，带我逛周围的饭店介绍周边的环境给我开文档的权限什么的，还会撺掇我去拿吃的2333。</p>
<p>随手算是暑期镀金的好地方了，不用像很多实习生那样担心租房问题，大城市租房是真的贵啊。加上在异地，看房也是问题。公司分配宿舍，溜的时候退租就好了。</p>
<p>这里要吐槽下 HR，emmmm 工牌在上班后两天才拿到，结果发现还要去开门禁权限……我至今仍然不能自由出入……</p>
<h2 id="闲聊"><a href="#闲聊" class="headerlink" title="闲聊"></a>闲聊</h2><p>随手算比较大的了，对新人很友好，文档很丰富，我们组有活干，起码之后不会带薪摸鱼。</p>
<p>来深圳其实父母不是很支持，担心我的安全，因为这件事我向他们哭诉了很多次了，也影响了春招后来的状态。再后来父母也拿我没办法，只能妥协。互联网的信息差对我们这代以及我们的父母影响还是很大的。当然也有观念的问题，父母想一直把我限制在浙江，甚至最好在村里找份工作，这样会安生许多。可是……</p>
<p>我真的不想一直在父母的庇护下成长，父母是农村人加上家境又不是很殷实，下半年加油吧！</p>
]]></content>
      <categories>
        <category>日常记录</category>
      </categories>
      <tags>
        <tag>随手科技</tag>
        <tag>实习</tag>
      </tags>
  </entry>
  <entry>
    <title>春耕，</title>
    <url>/spring-plowing/</url>
    <content><![CDATA[<p align="center"><br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190618112410.jpeg" class="full-image"><br></p>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>我胡汉三又回来了</p>
</blockquote>
<p>考完最后一门马克思主义原理，就意味着三月份自己制定的春招计划画上了逗号。</p>
<a id="more"></a>
<h2 id="金三银四"><a href="#金三银四" class="headerlink" title="金三银四"></a>金三银四</h2><p>这里我只想提醒一句，每个人的一生中不出意外的话只有一次金三银四，也就是大三下的这一段时间。虽然可能你的未来不取决于这段时间，但如果这段时间状态良好无疑会给你未来的职业生涯中添加上浓墨重彩的一笔。</p>
<p>很遗憾，我并没有把握住这些机会，复盘原因：</p>
<ul>
<li>简历准备不充分<br>在期间，我听取他人的建议更换了一次简历，这里感谢亚信科技老哥提供的建议。他的建议是，既然找 Java 后台实习，你的简历上要单独开发的模块，要让人家清楚招你进来你是能干活的，而不是吹吹牛皮。</li>
<li>挑战杯事宜<br>这是个无比巨大的坑，虽然我是负责人，但是真的很累。你每礼拜需要花费一小时地铁上的时间区评委家中更改文档，不止一次！！！临近比赛，还要去准备答辩事宜……拿的钱却跟同等级别比赛的钱是一样的，这也太坑了！<br><del>为什么还要参加？去翻我前面的文章吧</del></li>
<li>基础不牢，地动山摇<br>基本上我的三四月份是在投简历-笔试-投简历中度过，根本没有电话，注意一个都没有！意思是我笔试没通过呗，加上上一条原因，金三银四就过去了……</li>
</ul>
<h2 id="五月重新起航"><a href="#五月重新起航" class="headerlink" title="五月重新起航"></a>五月重新起航</h2><p>其实四月底已经开始着急了，开始在 Boss 直聘上找小公司练面试。有幸的是，经过三四月份魔鬼训练，小公司的面试题都比较简单，收到了几家不错的 Offer，但由于不是很甘心（想去稍微大一点的公司），所以一直吊着，至今还没拒绝……</p>
<p><strong>这里重点提醒一下，在春招前最好要先找小公司沉淀一下（大牛当我没说），问问面试题项目啊都是极好的，而且过了有个保底 Offer，心里也不慌了。</strong><br>实话说，我当初看到这条前人的经验了，但当时头铁啊，实习面试我这种水平应该还行吧，哪知道水这么深……</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然收到了还算满意的 Offer，但这家公司在深圳（不是你们想的某讯）……离杭州太远了，属实不方便。</p>
<h3 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h3><p>所谓经验，给秋天的我和未来的你们看吧</p>
<ul>
<li>看到招聘信息请立刻投简历<br>别像我这样攒着攒着，人招满了，连面试机会都没有</li>
<li>打好基础，想进大厂实习需要计算机深厚的功底<br>菜鸡能做的是刷题，搞懂知识点 </li>
<li>找小公司试水（大牛绕道）</li>
<li>寒假就需要准备了<br>甚至在期末考试结束后就要准备了，金三银四想要上岸，真的一点都不夸张，像我三月份才开始准备真的太晚了。</li>
</ul>
<p>最后，期待秋收。</p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>春招</tag>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 8 实战</title>
    <url>/java-8-in-action/</url>
    <content><![CDATA[<p align="center"><br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190609220916.png" class="full-image"><br></p>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很早就想仔细学了，终于有机会记一下笔记……</p>
<a id="more"></a>
<h2 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h2><h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><p>只定义了一个<strong>抽象</strong>方法的的接口，值得注意的是，Java 8 引入了 stream 等方法，但是原先的 Collection 里没有。为了提高效率，接口的设计者就引入了 default 关键字来扩充接口。可用 @FunctionalInterface 标记为函数式接口，类似 @Override。</p>
<h3 id="常用的接口"><a href="#常用的接口" class="headerlink" title="常用的接口"></a>常用的接口</h3><ul>
<li>Predicate<br>返回 boolean</li>
<li>Consumer<br>void，适用于 <code>sout</code></li>
<li>Function<br>可以将 T 转化为 R</li>
</ul>
<h3 id="感觉"><a href="#感觉" class="headerlink" title="感觉"></a>感觉</h3><p>其实 Java 中就是一个接口实现，如果要扯到函数式编程的话就要扯到 lambda 演算，主要为三条规则：</p>
<ul>
<li>函数定义</li>
<li>标识符引用</li>
<li>函数应用</li>
</ul>
<p><del>说人话</del></p>
<p>我的理解是这三条规则为定义一个变量和函数，然后告诉你定义完了怎么去使用它</p>
<p>举个难一点的栗子（PS：为什么要举难一点的例子……<del>答：装逼</del>）<br><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">(<span class="name">lambda</span> x y. x y) (<span class="name">lambda</span> z . z * z) 3</span><br></pre></td></tr></table></figure></p>
<h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><blockquote>
<p>从支持数据处理操作的源生成的元素序列</p>
</blockquote>
<p>用过的人都说好……</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li><p>内部迭代<br>将迭代封装在内部，例如</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Dish.menu.stream().map(Dish::toString).collect(Collectors.toList());</span><br><span class="line">Dish.menu.stream().forEach(System.out::println);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用规则</p>
<ul>
<li>数据源（例如集合）</li>
<li>中间操作链</li>
<li>终端操作</li>
</ul>
</li>
<li>流只能遍历一次，只能消费一次</li>
</ul>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Stream.of</span></span><br><span class="line">Stream.of(<span class="string">"Java 8"</span>, <span class="string">"Lambdas"</span>, <span class="string">"In"</span>, <span class="string">"Action"</span>).map(String::toUpperCase).forEach(System.out::println);</span><br><span class="line"><span class="comment">// Stream.empty</span></span><br><span class="line">Stream&lt;String&gt; emptyStream = Stream.empty();</span><br><span class="line"><span class="comment">// Arrays.stream</span></span><br><span class="line"><span class="keyword">int</span>[] numbers = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;;</span><br><span class="line">System.out.println(Arrays.stream(numbers).sum());</span><br></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="筛选和切片"><a href="#筛选和切片" class="headerlink" title="筛选和切片"></a>筛选和切片</h4><ul>
<li>filter</li>
<li>distinct<br>筛选互异元素</li>
<li>limit<br>取前几个元素</li>
<li>skip<br>跳过前几个元素</li>
</ul>
<h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><ul>
<li>map</li>
<li><p>flatMap<br>将流中的每个值都换成另一个流，然后把所有的流连接起来成为一个流，个人理解为将流里的值继续转换为子流然后连接。</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list1 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">List&lt;Integer&gt; list2 = Arrays.asList(<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">list1.stream().flatMap(i-&gt;</span><br><span class="line">   list2.stream().map(j-&gt;<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i,j&#125;)</span><br><span class="line">    ).forEach(t-&gt; System.out.println(t[<span class="number">0</span>]+<span class="string">","</span>+t[<span class="number">1</span>]));</span><br></pre></td></tr></table></figure>
</li>
<li><p>mapToInt</p>
</li>
</ul>
<h4 id="查找和匹配"><a href="#查找和匹配" class="headerlink" title="查找和匹配"></a>查找和匹配</h4><p>短路操作，找到一个符合条件的立即返回</p>
<ul>
<li>anyMatch<br>至少匹配一个</li>
<li>allMatch<br>都匹配</li>
<li>noneMatch<br>没有匹配的</li>
<li>findAny</li>
<li>findFirst<br>与楼上有并行的区别，findAny 不一定是返回第一个</li>
</ul>
<h4 id="规约"><a href="#规约" class="headerlink" title="规约"></a>规约</h4><p>使用 reduce，第一个参数为初始值，第二个为执行函数直到规约到一个数</p>
<h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ul>
<li><p>数值流以及对象流相互的转化</p>
<ul>
<li>IntStream</li>
<li>LongStream</li>
<li>DoubleStream<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> calories = menu.stream().mapToInt(Dish::getCalories).sum();</span><br><span class="line">menu.stream().mapToInt(Dish::getCalories).boxed();</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>数值范围</p>
<ul>
<li><p>rangeClosed</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> count = IntStream.rangeClosed(<span class="number">1</span>, <span class="number">100</span>).filter(d -&gt; d % <span class="number">2</span> == <span class="number">0</span>).count();</span><br></pre></td></tr></table></figure>
</li>
<li><p>range<br>不包括结束值</p>
</li>
</ul>
</li>
</ul>
<h3 id="收集器"><a href="#收集器" class="headerlink" title="收集器"></a>收集器</h3><blockquote>
<p>前面的都是小儿科，在开发人员的代码里很多都是收集器</p>
</blockquote>
<h4 id="规约与汇总"><a href="#规约与汇总" class="headerlink" title="规约与汇总"></a>规约与汇总</h4><ul>
<li>counting</li>
<li>maxBy<br>需要实现 Comparator</li>
<li>summingInt/summingLong/summingDouble</li>
<li>averagingInt/averagingLong/averagingDouble</li>
<li>summarizingInt/summarizingLong/summarizingDouble</li>
<li>joining</li>
</ul>
<h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><p>通过 reducing() 实现，需要三参数，单参数为三参数的特殊情况，起点为第一个项目，转换函数为恒等函数，第三个为函数计算<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">menu.stream().map(Dish::getName).collect(joining());</span><br><span class="line">menu.stream().map(Dish::getName).collect(reducing((s1,s2)-&gt;s1+s2)).get();</span><br><span class="line">menu.stream().collect(reducing(<span class="string">" "</span>,Dish::getName,(s1,s2)-&gt;s1+s2));</span><br></pre></td></tr></table></figure></p>
<h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><blockquote>
<p>groupingBy  </p>
</blockquote>
<ul>
<li>单参数 groupingBy(f) 实际是 groupingBy(f,toList()) </li>
<li>双参数，第二个参数为任意类型的收集器，也可为 groupingBy(f)</li>
<li>常用的联合使用收集器为 summingInt,counting,mapping 等</li>
<li>隐含参数可为 toSet()</li>
</ul>
<h4 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h4><blockquote>
<p>特殊的分组，分区函数返回 boolean</p>
</blockquote>
<h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><ul>
<li><code>Supplier&lt;A&gt; supplier()</code></li>
<li><code>BiConsumer&lt;A, T&gt; accumulator()</code></li>
<li><code>Function&lt;A, List&lt;T&gt;&gt;()</code></li>
<li><code>BinaryOperator&lt;A&gt; combiner()</code></li>
<li><code>Set&lt;Characteristics&gt; characteristics()</code></li>
</ul>
<h4 id="自定义收集器"><a href="#自定义收集器" class="headerlink" title="自定义收集器"></a>自定义收集器</h4><p>单纯的能看懂……</p>
<h3 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h3><ul>
<li>避免共享状态</li>
<li>留意装箱</li>
<li>limit 和 findFirst 依赖元素顺序</li>
</ul>
<p>PS：如果想提高效率，自行实现 Spliterator 接口<br><del>为什么就一句话，因为我不太会</del></p>
<h2 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h2><blockquote>
<p>Ootional说下个人理解，接口中引入了 default 关键字，使接口更新更加平滑，不需要更改已经编译出来的客户端 clas 文件，只需在上游添加默认方法即可。<br><del>其实官方就是为了方便引入 stream，防止升级之后出现客户端代码崩溃的问题</del> </p>
</blockquote>
<h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><blockquote>
<p>这个竟然在面试中被问到了，1.8 之后处理异常有什么改进。虽然有了解过，但是竟然被问懵了，还有区别？？？后来经过提醒才意识到原来他问的是空指针处理的 Optional……</p>
</blockquote>
<h3 id="他山之石"><a href="#他山之石" class="headerlink" title="他山之石"></a>他山之石</h3><p>在很早之前<del>好像是《七周七语言》里（具体我忘了哪本书）</del>看到的说语言的设计者很痛恨引入空指针这个概念，因为程序员在业务中需要去进行繁琐的判断，后来才设计出 Haskell 的 Maybe 类型。<br>像 Groovy 处理就直接引入安全导航操作符，若引用链中有空指针传递下去，返回一个 null。</p>
<h3 id="可以攻玉"><a href="#可以攻玉" class="headerlink" title="可以攻玉"></a>可以攻玉</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCarInsuranceName</span><span class="params">(Optional&lt;Person&gt; person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person.flatMap(Person::getCar)</span><br><span class="line">            .flatMap(Car::getInsurance)</span><br><span class="line">            .map(Insurance::getName)</span><br><span class="line">            .orElse(<span class="string">"Unknown"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h3><p>在设计时没有考虑将其作为类的字段使用，没有实现 Serializable 接口，无法序列化<br>替代方案如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Insurance insurance;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;Insurance&gt; <span class="title">getInsuranceAsOptional</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> insurance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="个人感受"><a href="#个人感受" class="headerlink" title="个人感受"></a>个人感受</h3><p>有点类似流，但不同于流的是它只是个对象，如 filter 是对对象属性的操作</p>
<h2 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h2><p>工厂方法<br>CompletabelFuture.supplyAsync();</p>
<ul>
<li>异步操作，相比于并行的 stream 可以自定义线程池，适用于 I/O 密集型任务</li>
<li>管理异常</li>
<li>可以将异步任务合并<br><code>thenCombine</code></li>
<li>注册回调函数<br><code>thenAcecpt</code></li>
<li>决定程序运行<br><code>allOf</code> <code>anyOf</code></li>
</ul>
<h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><ul>
<li>LocalDate</li>
<li>LocalTime</li>
<li>LocalDateTime</li>
</ul>
<p>未完待续……</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>学习</tag>
        <tag>代码</tag>
      </tags>
  </entry>
  <entry>
    <title>面试一二事</title>
    <url>/interview-question/</url>
    <content><![CDATA[<p align="center"><br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190515233124.jpeg
" class="full-image"><br></p>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>整理录音的时候才发现自己有多菜，这都回答的啥呀……</p>
<a id="more"></a>
<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><ul>
<li>Java 八大基本类型<ul>
<li>short 变量 +1，真的细，还好好久之前瞄了一眼</li>
</ul>
</li>
<li>New String(“123”) new 了几个对象</li>
<li>equals 与 ==</li>
<li>HashMap 原理</li>
<li>红黑树定义、优点与普通二叉树的区别，效率</li>
<li>ConcurrentHashMap</li>
<li>Synchronized<ol>
<li>普通同步方法，锁是当前实例对象</li>
<li>静态同步方法，锁是当前类的class对象</li>
<li>同步方法块，锁是括号里面的对象</li>
</ol>
</li>
<li>volatile</li>
<li>反射</li>
<li>IOC 原理以及好处</li>
<li>AOP<ul>
<li>JDK 原生</li>
<li>CGLib</li>
</ul>
</li>
<li>Spring 事务级别</li>
<li>SpringBoot 自动化</li>
<li>垃圾回收<ul>
<li>引用计数</li>
<li>root 节点</li>
</ul>
</li>
<li>Mybatis 执行流程</li>
<li>Mybatis 与 JDBC 的区别</li>
<li>NIO</li>
<li>TCP 与 UDP 区别</li>
<li>TCP 三次握手</li>
<li>MySQL 索引</li>
<li>MySQL 死锁</li>
<li>MySQL 乐观锁以及悲观锁</li>
<li>查看日志命令</li>
</ul>
<h3 id="人生"><a href="#人生" class="headerlink" title="人生"></a>人生</h3><ul>
<li>未来一年的规划</li>
<li>理想的工作环境</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>真的早就是优势</title>
    <url>/spring-will-end/</url>
    <content><![CDATA[<p align="center"><br>    <img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190426211604.jpg" class="full-class"><br></p>

<h2 id="提要"><a href="#提要" class="headerlink" title="提要"></a>提要</h2><p>总说春江水暖，但只有体验过才知道今年的水让我瑟瑟发抖。我就是死也不会考研？</p>
<a id="more"></a>
<h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><p>四月快走了，仍然没有春招 Offer。不过最近的感悟倒是获得挺多，当然还有血淋淋的教训。</p>
<h3 id="早"><a href="#早" class="headerlink" title="早"></a>早</h3><blockquote>
<p>早就是优势。</p>
</blockquote>
<p>投简历越早投越好，就是知道内推信息就得立刻马上投。不要像我这样收藏着一大波招聘内推消息，过了几礼拜才投，hc 早没了……加上自身学校没有 Buffer 加成，我也不知道两个月前哪来的自信<del>（不要跟我扯招聘时间，真的是越早投机会越大，因为我就是看了招聘时间，结果很难受，我挺后悔的）</del>不举例子了，因为排队的人太多，我已经被简历劝退了两三次了，真的是血淋林的教训啊。</p>
<p>不过从另一方面来讲，春天为秋天积攒了经验，总比秋天结束的时候才知道好，毕竟大目标还是秋天，只是夏天缺乏了漂亮光鲜的履历罢了，但说实话挺难受的。</p>
<h3 id="革命尚未成功"><a href="#革命尚未成功" class="headerlink" title="革命尚未成功"></a>革命尚未成功</h3><p>有人说可以准备秋天了，但我并不认同。因为还有收官战，虽然金三银四转瞬即逝，但春天还没结束，拿起武器继续战斗吧！</p>
<p>未完，待续……</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>春招</tag>
        <tag>扯淡</tag>
        <tag>经验</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发入门</title>
    <url>/thread/</url>
    <content><![CDATA[<p align="center"><br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190411120437.jpg " class="full-image"><br></p>

<h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><blockquote>
<p><del>拖更一时爽，一直拖更一直爽</del></p>
</blockquote>
<p>最近忙于找实习以及挑战杯省赛，两者聚在一起当然就忙得不可开交。关于省赛，前几篇文章也有提到，其实我是不太愿意花时间搞的，但是命运使然，只好寻找某一平衡点喽。<br><a id="more"></a></p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote>
<p>介绍一些概念，当然也为了使自己印象深刻</p>
</blockquote>
<h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>操作系统调度的最小单元，一个进程中的所有的线程都有完全一样的地址空间，意味着共享同样的全局变量。</p>
<h3 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h3><p>CPU 分配给各个线程时间片，但因为时间片很短，所以 CPU 不停的切换线程。但是 CPU 切换前会保存上一个任务的状态（进程状态、优先级、程序 I/O 的状态、文件描述符等）到内存，以便下次切换回这个状态。</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><blockquote>
<p>多次上下文切换会影响多线程执行速度</p>
</blockquote>
<ul>
<li>无锁并发编程</li>
<li>CAS 算法</li>
<li>使用最少线程</li>
<li>协程</li>
</ul>
<h2 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h2><blockquote>
<p>等待/通知的经典范式</p>
</blockquote>
<ul>
<li><p>等待方</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(对象)&#123;</span><br><span class="line">    <span class="keyword">while</span>(条件不满足)&#123;</span><br><span class="line">        对象.wait();</span><br><span class="line">    &#125;</span><br><span class="line">    对应的处理逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通知方</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(对象)&#123;</span><br><span class="line">    改变对象</span><br><span class="line">    对象.notifyAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Thread-join"><a href="#Thread-join" class="headerlink" title="Thread.join()"></a>Thread.join()</h2><blockquote>
<p>线程 A 执行了 thread.join() 语句时表示，当前线程 A 等待 thread 线程终止之后才从 thread.join() 返回。</p>
</blockquote>
<h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><blockquote>
<p>个人看源码理解就是在虚拟机栈中存着引用，真正存值的是 ThreadLocalMap。而 ThreadLocalMap 内部用 Entry 存放 K-V，哈希冲突则采用的是开放寻址法。<br>另外，ThreadLocal 在线程池里容易存在内存泄漏，因为只要线程被 GC 回收，即使弱引用 Key 的值为 null，一般不会内存泄漏。就怕线程池回收利用，Key 为 null 了，value 则还有值。解决方法就是调用 remove() 方法，将值设置为 null。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>春招</tag>
        <tag>面试</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解 Java 虚拟机</title>
    <url>/jvm/</url>
    <content><![CDATA[<p align="center"><br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190331132452.png" class="full-image"><br></p>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有输入肯定要有输出。</p>
<a id="more"></a>
<h2 id="内存区域划分"><a href="#内存区域划分" class="headerlink" title="内存区域划分"></a>内存区域划分</h2><p><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190331103031.png" alt></p>
<ul>
<li>程序计数器<br>唯一一个没有规定 OOME 的地方。执行 Java 方法时记录当前方法的 JVM 指令地址；执行 Native 方法时，计数器为空。</li>
<li>Java 虚拟机栈</li>
<li>本地方法栈</li>
<li>堆<br>内存管理的核心区域，分为新生代和老年代，再细致一点分为 Eden 空间、From Survivor、To Survivor 等</li>
<li>方法区<br>所有线程共享的内存区域，存储元数据，如类结构信息、字段、方法等。无法满足内存分配需求时，抛出 OOME。<ul>
<li>运行时常量池<br>方法区的一部分，存放编译期生成的各种字变量，还有运行时的符号引用等。例如 String.intern() 后放置的地方。</li>
</ul>
</li>
<li>直接内存<br>JDK 1.4 引入 NIO 类，它可以使用　Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆中的 DirectByteBuffer 对象作为这块内存的引用进行操作。</li>
<li>Code Cache<br>JIT Compiler 在运行时对热点方法的编译；GC 运行时部分需要占用的空间等，但 JVM 规范中并没有涉及。</li>
</ul>
<h2 id="OutOfMemoryError"><a href="#OutOfMemoryError" class="headerlink" title="OutOfMemoryError"></a>OutOfMemoryError</h2><h3 id="堆溢出"><a href="#堆溢出" class="headerlink" title="堆溢出"></a>堆溢出</h3><p>不断创建对象并且无法回收</p>
<h3 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h3><p>在单线程下，当内存无法分配时，虚拟机抛出通常是 StackOverflowError 异常。</p>
<h3 id="方法区运行时常量池溢出"><a href="#方法区运行时常量池溢出" class="headerlink" title="方法区运行时常量池溢出"></a>方法区运行时常量池溢出</h3><p>JVM 对于方法区的回收非常不积极，例如老版本的 JDK 处理 String.Intern() 时占用太多空间。随着元数据区的移除永久代，类元数据只受本地内存影响。</p>
<h3 id="本机直接内存溢出"><a href="#本机直接内存溢出" class="headerlink" title="本机直接内存溢出"></a>本机直接内存溢出</h3><p>垃圾回收不会主动收集 Direct Buffer，需要自己手动调 System.gc()。另外。不会在 Heap Dump 中看见。</p>
<h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p>判断对象是否存活，引用计数法很难解决循环引用的问题，所以才有了可达性分析</p>
<p>GC Roots 的对象包括以下几种：</p>
<ul>
<li>虚拟机栈中引用的对象</li>
<li>方法去类静态属性引用的对象</li>
<li>方法去常量引用的对象</li>
<li>Native 方法引用的对象</li>
</ul>
<h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><p>至少两次标记过程，第一次标记筛选出有必要执行的 finalize() 方法的对象，对象可在 finalize() 中自救一次，因为 finalize() 方法只会被系统自动调用一次。</p>
<h3 id="回收算法"><a href="#回收算法" class="headerlink" title="回收算法"></a>回收算法</h3><ul>
<li>标记-清除算法<br>效率不高，会产生大量不连续的内存碎片</li>
<li>复制算法<br>新生代采用复制算法收集内存，大对象通过分配担保机制进入老年代</li>
<li>标记-整理算法<br>将存活的对象移至一端，减少内存碎片</li>
<li>分代收集算法<br>根据年代特点采用最适当的算法，需要上述算法支持</li>
</ul>
<h3 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h3><blockquote>
<p>都可通过参数设定</p>
</blockquote>
<ul>
<li>对象优先在 Eden 中分配</li>
<li>大对象直接进入老年代</li>
<li>长期存活的对象将进入老年代<br>年龄计数器</li>
<li>动态对象年龄判断<br>Survivor 空间中相同年龄所有对象大小总合大于 Survivor 空间的一半，年龄大于或等于该年龄的对象就直接进入老年代</li>
<li>空间分配担保<br>需要检查老年代的空间是否满足新生代所有对象空间，不够的话还要查看设置的值是否允许冒险，以决定 FullGC 是否有必要</li>
</ul>
<h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><ul>
<li>加载<br>获取字节流，生成对象，提供数据访问入口</li>
<li>验证<br>是否符合虚拟机规范</li>
<li>准备<br>为变量分配值</li>
<li>解析<br>将符号引用替换为直接引用</li>
<li>初始化<br>执行类构造器 <clinit>() 方法</clinit></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 内存模型与 volatile</title>
    <url>/jmm-volatile/</url>
    <content><![CDATA[<p align="center"><br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/coffee-1580595_960_720.jpg" class="full-image" width="60%"><br></p>

<h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><p>最近看《深入理解 Java 虚拟机》的一些笔记，又是一本相见恨晚的书，强烈推荐前几章和后面几章。</p>
<a id="more"></a>
<h2 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h2><p><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/test.png" alt="image"></p>
<p>此图来自《深入理解 Java 虚拟机》，看完以后感觉这个知识水平都提高了2333。这里的主内存不是内存条，而是虚拟机的内存的一部分。不同的线程通过刷新主内存中的值来进行同步。如果没有线程并发的考虑，闭着眼睛就能想到数据的不一致。</p>
<p>内存模型定义了以下 8 种操作来完成主内存与工作内存同步的细节，除去特殊情况，每一个操作是原子不可再分的</p>
<ul>
<li>lock</li>
<li>unlock</li>
<li>read</li>
<li>load</li>
<li>use</li>
<li>assign</li>
<li>store</li>
</ul>
<p>另外还定义了一些规则，太多了没咋记住……不过也以此引出了最为常见的先行发生的原则，用于确定访问是否线程安全。</p>
<h2 id="happen-before-规则"><a href="#happen-before-规则" class="headerlink" title="happen-before 规则"></a>happen-before 规则</h2><p>中文名叫先行发生规则，含义是Java 内存模型下天然存在一些关系，无需同步器去实现，可以在编码中直接使用。换句话说，不在先行发生规则的两个操作，虚拟机可以对它们进行重排序，也就是线程不安全了。</p>
<p>规则有八条：</p>
<ul>
<li>程序次序规则<br>同一线程按照控制流顺序</li>
<li>管程锁定规则<br>unlock 指令操作先于 lock 操作</li>
<li>volatile 变量规则、<br>写操作先于读操作</li>
<li>线程启动规则<br>start 最先发生</li>
<li>线程终止规则<br>终止检测最后发生</li>
<li>线程中断规则<br>interrupt() 先行发生于代码检测中断</li>
<li>对象终结规则<br>初始化先于 finalize</li>
<li>传递性<br>A 先于 B，B 先于 C</li>
</ul>
<p>需要注意的一点是，时间先后顺序与先行发生顺序没有太大的关系，一切以先行发生的原则为准。</p>
<h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><blockquote>
<p>有了内存模型的概念，对 volatile 又有了几分理解<br>Java 虚拟机提供的最轻量的同步机制，当一个变量被定义为 volatile 时有一下两种语义</p>
</blockquote>
<h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>volatile 变量对所有线程是立即可见的，对 volatitle 变量所有写操作都能立即反映到其他线程中。但注意他并不是安全的，因为该操作不是原子性的。所谓原子性，就是该变量执行如运算等操作只有等它运算完写入主内存中，其他线程才能操作该变量。没错，保证原子性你可以理解为加个锁。</p>
<h3 id="禁止指令重排序"><a href="#禁止指令重排序" class="headerlink" title="禁止指令重排序"></a>禁止指令重排序</h3><blockquote>
<p>指令重排序指操为了采用流水线机制加快指令的处理速度<br>重排序分为两类：编译期重排序和运行期重排序，分别对应编译时和运行时环境。重排序的前提是需要满足以下条件</p>
<ol>
<li>在单线程环境下不能改变程序运行的结果； </li>
<li>存在数据依赖关系的不允许重排序</li>
</ol>
</blockquote>
<p>普通变量仅仅保证在方法执行过程中所有依赖赋值结果的地方能获取正确结果，而不能保证赋值操作和代码执行顺序一样</p>
<h3 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h3><ul>
<li>在该变量的写操作之前编译器插入一个写屏障</li>
<li>在该变量的读操作之前编译器插入一个读屏障</li>
</ul>
<p>翻译到汇编代码层面 <code>lock addl $0x0,(%esp)</code> 就是将 ESP 寄存器的值加 0，使本 CPU 的 Cache 写入内存，该写入操作会引起别的 CPU 或者别的内核无效化其 Cache。通过该空操作让前面对 volatile 变量的修改对其他 CPU 立即可见。</p>
<p>重排序为了优化，至于禁止重排序，也是将该变量的值强制刷出缓存，将修改同步到主内存，意味着所有之前的操作已经完成，也就达到了无法跨越内存屏障的效果了。这里要仔细体会。</p>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul>
<li>volatile 不保证原子性</li>
<li>屏蔽指令重排序操作 JDK 1.5 中才被修复，此前不可完全避免重排序</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>强烈推荐《深入理解 Java 虚拟机》，看目录你会发现那些曾几何时听说过晦涩难懂的名字都会在此书中讲到。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>几道面试题</title>
    <url>/interview/</url>
    <content><![CDATA[<p align="center"><br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190321105440.png" class="full-image"><br></p>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>复习的时候就想写了，为自己做点笔记，加深印象理解原理吧。</p>
</blockquote>
<a id="more"></a>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote>
<p>又一个我敬佩的人 <a href="https://www.zhihu.com/question/19596615/answer/12327310" target="_blank" rel="noopener">CaoZ 老师</a>分享在知识星球的片段</p>
</blockquote>
<ol>
<li>从你浏览器输入网址，到网页打开。中间都经历了什么。</li>
<li>如果现在有用户反馈你的网站打开很慢，或者说打不开，你考虑的判断和排查步骤是什么，以及为什么。</li>
<li>现在数据库出现了 too many connections 错误，请问排查思路和后续动作是什么。</li>
</ol>
<h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p>乍一看像 DNS 题，定睛一看，还是一道 DNS 题。其实不尽然。说下我看完曹老师文章后的理解。</p>
<p>从输入网址，浏览器会检查域名是否在缓存当中，若是国内第三方“良心”浏览器会触发钩子，会跳转微软搜索页面。然后才是本地 host 文件的判断。这个文件映射的是键值对，在 GFW 没有升高之前，我通过更改 hosts 文件还去看了一下世界。当然那时候也不懂什么 hosts，到后来才慢慢接触了解到。</p>
<p>如若本地客户端仍没有完成解析，就会真正请求域名服务器来解析这个域名。首先从网络配置中获取本地 DNS 解析服务器地址，一般不会离得太远，而且性能极好，能完成 80% 的工作。缓存时间根据 TTL 值控制。</p>
<p>若本地 DNS 仍没有命中，需根据本地 DNS 设置（是否含有转发器进行查询）。如果没有转发模式，直接查找根服务器，要求查找该 URL 中顶级域名服务器（gTLD）。然后依次查找权威 DNS 服务器，例如 <code>github.com</code> 的权威服务器。之所以叫他权威服务器是因为管理着众多二级域名。他将给本地 DNS 服务器返回一个具体的 IP 地址。本地 DNS 服务器将缓存结果的同时发送给客户端。当然有很多权威服务器做了全局均衡代理，权威服务器将返回众多 IP。客户端 DNS 解析器缓存结果并通过随机或者轮询等机制进行访问。</p>
<p>如果用的是转发模式，本地 DNS 则会将请求转发至上一级 DNS 服务器。上一级则会将请求转发上上一级或者寻找根 DNS。</p>
<h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><p>场景题，虽然还是学生，但是我认为很真实。</p>
<p>首先当然自己打开网站试试喽。如果正常，考虑全国测速，并进行 CDN 全国加速（CDN 部署时个人认为就要加上）。如果慢，一种特殊的情况是 DNS 解析出问题了，直接 IP 访问试试。还可以用 Chrome 开发者工具进行相应的抓包等。</p>
<h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><p>查看连接池日志，当然我也会优先考虑数据库连接有没有 close 的问题，其次是高并发下出现阻塞，导致大量连接被阻塞。然后再查看数据库相关的连接配置。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://github.com/alex/what-happens-when" target="_blank" rel="noopener">what-happens-when</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzI0MjA1Mjg2Ng==&amp;mid=209679438&amp;idx=1&amp;sn=d68c1512ad23f6e164f69bd351a18c62&amp;scene=7&amp;ascene=0&amp;devicetype=android-27&amp;version=2607033a&amp;nettype=WIFI&amp;abtest_cookie=BAABAAoACwASABQABAAmlx4AV5keAJuZHgCgmR4AAAA%3D&amp;lang=zh_CN&amp;pass_ticket=IwU%2BrHnkJALzgEGVy5PIkB2lrT7AmStPIpUk58wRR6g%3D&amp;wx_header=1" target="_blank" rel="noopener">caoz的梦呓</a></li>
<li><a href="https://www.percona.com/blog/2013/11/28/mysql-error-too-many-connections/" target="_blank" rel="noopener">mysql-error-too-many-connections</a></li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>面试</tag>
        <tag>知识星球</tag>
      </tags>
  </entry>
  <entry>
    <title>空谷幽兰，心如皓月</title>
    <url>/for-interview/</url>
    <content><![CDATA[<p align="center"><br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190317191958.png" class="full-image"><br></p>

<h2 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h2><p><a href="https://yi-yun.github.io/final2018/">2018 年终总结</a>给自己立的每周输出两三篇博客的 flag 快倒了……此篇就当这几天为春招奋战的总结了。</p>
<a id="more"></a>
<h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>很不幸的是，在今天之前只投了两份简历，一份被拒了，还有一份内推到的笔试。然而这笔试什么玩意，分两场笔试，</p>
<p>一场 30 分钟的逻辑推理。这尼玛真的有病，浪费我感情。我看了几道根本看不出来规律，就开始乱选了。还有一场正规的笔试，没发挥好，也可以说第一次没经验，菜。很多基本的选择题没有复习，点了下一题后还不能改，三道算法题一道没写出来。不过唯一的好处就是，知道了 笔试的形式，也为以后做了准备23333。</p>
<h2 id="笔试之后"><a href="#笔试之后" class="headerlink" title="笔试之后"></a>笔试之后</h2><p>当然是倍受打击了，至于能不能像小说主人公那样在后面逆转我就不知道了。</p>
<h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><p>上篇博文提到了希望杯比赛，可能很多人不知道。如果换个名字，挑战杯就会很熟悉了。上回说到，我为了校赛答辩准备很久，也牺牲了一部分准备春招的时间。天真的以为过了校赛答辩就可以松一口气了，但实验室的老师明显是想让我拼一拼从省一进国赛。我提出了接下来我的想法，老师不置可否。。</p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><blockquote>
<p>我当然是想准备春招了，一生只有一次。</p>
</blockquote>
<p>指导老师嘛总是忽悠我去努力争取一下省一，还提出了有奖金啊啥的，实习的事可以放一放，暑假的事又不急。</p>
<p>我当时心里一万个 mmp，终于体会到了什么叫做身不由己。首先，我很明确的想过，春招和挑战杯的事情，以春招占大头。因为我想进大厂，甚至想直接转正。这是乌鸡变凤凰的最好时机，而老师却认为暑期小公司实习就差不多了。</p>
<p>其次，跟我说奖金和报销经费。他们竟然认为我是为了钱才去实习的。拜托，搞清楚，这些小钱我根本不放在眼里。你确定 10000 块钱跟阿里、头条等大厂的实习 Offer 比起来算事么？？？我当时就差点甩出一句，现在你给我两万块钱现金，我眉头都不会皱一下地离开去准备春招。</p>
<p>当然上面的话都是我后面的心理活动，并没有在表面上与老师撕破脸皮，只是隐晦的表达我还是要准备面试的意思。但那天我真的很气。气自己没敢说，气老师信息获取滞后。其实，跟我们学院的总体环境有关系。我隐约认为他们根本没有意识到春招秋招的重要性，或者，他们太为自己、学院的名誉着想了，并不在意学生的前途。</p>
<h2 id="理想"><a href="#理想" class="headerlink" title="理想"></a>理想</h2><blockquote>
<p>上面那些话窝在肚子里很久了，讲出来也舒服点。</p>
</blockquote>
<p>最近在网络上发现了不少优秀大佬的博客笔记等</p>
<ul>
<li><a href="https://coolshell.cn/" target="_blank" rel="noopener">左耳朵耗子</a><br>本文文章名也取自他的座右铭。其实，寒假的时候他的博客就在收藏夹里了，也订阅了他的极客专栏。这尼玛简直是程序员的偶像，也是我未来奋斗的目标。<br>我一直想把博客做成他那样子，游客点进一篇文章，便被他的作者吸引得浏览全站。随后又发现了更多有意思的文章，就像酒香何必在意巷深那样，越品越有味道。我特别喜欢这种感觉，如若能交流一下交个朋友定是极好的，比如下面这位。</li>
<li><a href="https://github.com/Kuangcp/" target="_blank" rel="noopener">Kuangcp</a><br>我 <a href="https://github.com/yi-yun/" target="_blank" rel="noopener">GitHub</a> 上唯一关注的人，他的笔记仓库让我叹为观止。</li>
</ul>
]]></content>
      <categories>
        <category>日常记录</category>
      </categories>
      <tags>
        <tag>个人</tag>
        <tag>春招</tag>
        <tag>未来</tag>
        <tag>思考</tag>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>魔鬼藏在细节中</title>
    <url>/details/</url>
    <content><![CDATA[<p></p><p align="center"><br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190310211820.png" class="full-image"><br></p><p></p>
<h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><blockquote>
<p> The devil is in the details.</p>
</blockquote>
<p>被拒了简历，心情低落…</p>
<a id="more"></a>
<h2 id="答辩"><a href="#答辩" class="headerlink" title="答辩"></a>答辩</h2><p>本来也没啥，就是整个团队去拿着项目参加比赛，我只是该项目总负责人以及后端开发。但是很不幸的是，团队里考研的考研，划水的划水，也就只剩我去演讲……</p>
<p>那么问题就来了，一写代码的让我分享技术啥的我倒还可以凑活，这尼玛直接介绍项目让我很难受啊……</p>
<p>以上纯属牢骚，有点偏题了，但是在金三银四的黄金校招周中，每分每秒都十分宝贵。然而我还是不敢跟老师明说，不过我已经说明，忙完希望杯就不干活了，就当这几天为以后收利息了吧，虽然付出的代价也挺大的。</p>
<h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><blockquote>
<p>我在这立个 flag，能进省赛<br>答辩时的细节</p>
</blockquote>
<ul>
<li>微笑面对评委老师<br>不过他们没怎么看我2333</li>
<li>在答辩结束后竟然还能询问<br>真的是细节，我没有想到。这次比赛主要是给专家看有哪几个项目可以参加省赛的，有指导意义，也是老师不找演讲人的理由。所以，辅导员在结束后带着我们又找了一下三位和蔼可亲的评委老师。虽然已经评完分了，但我认为真的很有必要。</li>
</ul>
<h2 id="差距"><a href="#差距" class="headerlink" title="差距"></a>差距</h2><p>我们学院还有一组是关于图像的科技创新作品，但是在论文学术类以及科技发明类摇摆不定，被评委建议目标应该明确。项目中有几篇是在 SCI （大概是叫这个名字吧，不了解）发表的，但评委说不在二区一文不值。一旦出校在省内比拼，浙大的论文水平绝对碾压我们学校，根本没有可比性。这时，我才意识到学校差距的存在。</p>
<p>我也加了很多内推实习群，当看到那些 985/211 的 ID，感慨竞争对手的强大，绝对不亚于高考。</p>
<p>高考我已经输过一次了，没有人想输第二次。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote>
<p>古代剑客们在与对手狭路相逢时，无论对手有多么强大，就算对方是天下第一剑客，明知不敌，也要亮出自己的宝剑，即使倒在对手的剑下，也虽败尤荣。</p>
</blockquote>
<p>杀入春招。</p>
]]></content>
      <categories>
        <category>日常记录</category>
      </categories>
      <tags>
        <tag>个人</tag>
        <tag>学习</tag>
        <tag>项目</tag>
        <tag>春招</tag>
      </tags>
  </entry>
  <entry>
    <title>一个热点玩转树莓派</title>
    <url>/raspberry-setting/</url>
    <content><![CDATA[<p></p><p align="center"><br>    <img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190227154346.png" class="full-class"><br></p><br><!--[TOC]--><p></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天<a href="https://blog.asucreyau.xyz" target="_blank" rel="noopener">千魂剑</a>问我关于树莓派的问题，好久不用了，感觉有点遗忘，就有了此篇文章。</p>
<a id="more"></a>
<h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><ul>
<li><a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="noopener">官方下载地址</a><br>对是压缩包，所以 Windows 下的 <a href="https://sourceforge.net/projects/win32diskimager/files/latest/download" target="_blank" rel="noopener">Win32 Disk Imager</a> 可以直接刻录 zip 到 TF 卡</li>
</ul>
<h3 id="工具推荐"><a href="#工具推荐" class="headerlink" title="工具推荐"></a>工具推荐</h3><ul>
<li>读卡器<br>虽然 SD 卡也可以，但现在很多电脑没有 SD 卡槽</li>
<li>镜像烧录<ul>
<li>Win<ul>
<li><a href="http://rufus.ie/" target="_blank" rel="noopener">Rufus</a></li>
</ul>
</li>
<li>Mac<br>买不起，没用过</li>
<li>Linux<ul>
<li>dd 命令</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><blockquote>
<p>两种方法，网线，热点，但两者需要在一个局域网内  。<br>拥有屏幕的用户请路过…</p>
</blockquote>
<h3 id="网线"><a href="#网线" class="headerlink" title="网线"></a>网线</h3><p>连一根网线到路由器，在路由器后台查看 IP 撒花完结。</p>
<h3 id="热点"><a href="#热点" class="headerlink" title="热点"></a>热点</h3><blockquote>
<p>其实，树莓派基金会为了达成这个需求， 2017-2018 年逐渐在改善系统来适应这种优雅的方式，所以此方法只适用于新版系统。</p>
</blockquote>
<ol>
<li>打开烧录好的内存卡文件夹</li>
<li>找到 <code>/boot</code> 分区</li>
<li>建立一个空的 <code>ssh</code> 文件以及 <code>wpa_supplicant.conf</code> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">country=GB</span><br><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line">network=&#123;</span><br><span class="line">    ssid=&quot;你的Wifi名称，注意大小写&quot;</span><br><span class="line">    psk=&quot;你的Wifi密码&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>说明：空的 ssh 文件是为了开启 ssh 服务，系统默认不开启；wpa_supplicant.conf 是为了自动连接热点，ssid 支持中文。开机会将会删除以上两个文件。</p>
<h2 id="raspi-config"><a href="#raspi-config" class="headerlink" title="raspi-config"></a>raspi-config</h2><blockquote>
<p>默认管理员用户为 pi，密码为 raspberry</p>
</blockquote>
<ul>
<li>设置时间</li>
<li>将 tf 卡填充满<br>默认系统只占很少的空间</li>
</ul>
<h2 id="镜像源更改"><a href="#镜像源更改" class="headerlink" title="镜像源更改"></a>镜像源更改</h2><blockquote>
<p>树莓派源分为两种，一种为树莓派基金会提供，另一种由独立开发者提供</p>
</blockquote>
<ul>
<li>查询版本号<br><code>lsb_release -a</code> 不一样的版本更改源的地址不一样，版本号有 Stretch、Jessie 等，一般最新的是 <code>Stretch</code></li>
<li><p>官方源修改<br>这个软件源相关资料比较少，修改树莓派基金会单独提供的源</p>
  <figure class="highlight plain"><figcaption><span>/etc/apt/sources.list.d/raspi.list</span></figcaption><table><tr><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui</span><br></pre></td></tr></table></figure>
</li>
<li><p>开发源修改</p>
  <figure class="highlight plain"><figcaption><span>/etc/apt/sources.list</span></figcaption><table><tr><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>最后别忘了 <code>sudo apt-get update</code> 更新系统</p>
<h2 id="个人体验"><a href="#个人体验" class="headerlink" title="个人体验"></a>个人体验</h2><blockquote>
<p>我是拿树莓派当本地服务器的</p>
</blockquote>
<ul>
<li>喜欢纯命令行，不喜欢 VNC，而且感觉有点卡顿</li>
<li>风扇有点响，据说要买那种悬浮的，然而我是一套</li>
<li>散热片、亚克力壳，就是好看</li>
<li>不下片的话，8G TF 卡够了</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.jianshu.com/p/67b9e6ebf8a0" target="_blank" rel="noopener">树莓派—raspbian软件源（全）</a></li>
<li><a href="https://www.jianshu.com/p/f260967aefb1" target="_blank" rel="noopener">树莓派如何完全无头(无屏无网线无键盘鼠标)安装</a></li>
</ul>
]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>树莓派</tag>
        <tag>设置</tag>
      </tags>
  </entry>
  <entry>
    <title>清除 Git 敏感信息</title>
    <url>/clean-git-passwd/</url>
    <content><![CDATA[<p></p><p align="center"><br>    <img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190221203616.png" class="full-class"><br></p><p></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>算是 Git 的奇淫怪技</p>
<a id="more"></a>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>偶然在水群时看到一条消息，有人将服务器密码提交到了 Git 记录上。众所周知，公有仓库的 Git 记录是所有人可见的。所以一旦有敏感信息，不法分子就可以从你的 commit 记录中寻找突破口。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="Git-命令行"><a href="#Git-命令行" class="headerlink" title="Git 命令行"></a>Git 命令行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git filter-branch --force --index-filter <span class="string">'git rm --cached --ignore-unmatch sensitive-data.py'</span> --prune-empty --tag-name-filter cat -- --all</span><br><span class="line">git push origin --force –all</span><br></pre></td></tr></table></figure>
<p>这是我谷歌的命令，大概是在 Git 记录中删除带有敏感信息的文件，然后强制 push</p>
<h3 id="BFG"><a href="#BFG" class="headerlink" title="BFG"></a>BFG</h3><p>那么有没有更优雅的方法呢，答案是肯定的。</p>
<p>如标题所言，<a href="https://rtyley.github.io/bfg-repo-cleaner/" target="_blank" rel="noopener">BFG Repo Cleaner</a> 能帮到我们。该工具是用 Scala 写的，专门为清除 Git 提交记录中带有敏感信息而产生的。</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><blockquote>
<p>需要 Java 7 以上版本</p>
</blockquote>
<ul>
<li>安装以及使用<ul>
<li>点<a href="https://mvnrepository.com/artifact/com.madgag/bfg" target="_blank" rel="noopener">此</a>下载 jar 包<br><code>java -jar bfg.jar 命令参数</code></li>
<li>yay -S bfg<br><code>bfg 命令参数</code></li>
</ul>
</li>
</ul>
<p>如上所示，有两种安装方式，第一种是通用的运行下载的 jar 包，另一种是为 Arch 用户准备的…<del>（这时候就要喊出“Arch 牛逼”）</del>因为我是 Arch 忠实粉丝，所以就以 Arch 中的命令作为示范…</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>在 GitHub 仓库中创建一个专门来测试的仓库（我学 Git 的时候就已经有一个专门用来测试 Git 的仓库），将密码假装不小心上传到 GitHub。</p>
<p>当发现后，重新将密码去除后重新提交到 GitHub。此时，如果不看 commit 记录就不会知道历史版本，bfg 这个工具就为了防止有心人通过你的 commit 记录捕获你的敏感信息</p>
<ul>
<li><p>克隆仓库的 .git 文件夹</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --mirror git@github.com:yi-yun/git777github-learn.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>在本地创建 replace.txt<br>文本名字是任意的，文本内容需要将密码填上，默认替换成 <code>***REMOVED***</code>，也可以将其替换成自己想要的字符，规则如下所示</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PASSWORD1                       # Replace with &apos;***REMOVED***&apos; (default)</span><br><span class="line">PASSWORD2==&gt;examplePass         # replace with &apos;examplePass&apos; instead</span><br><span class="line">PASSWORD3==&gt;                    # replace with the empty string</span><br><span class="line">regex:password=\w+==&gt;password=  # Replace, using a regex</span><br><span class="line">regex:\r(\n)==&gt;$1               # Replace Windows newlines with Unix newlines</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行命令<br>需要注意两点，一是文本名字与路径，二是相关参数，也可用 <code>--replace-text</code></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bfg -rt ~/replace.txt git777github-learn.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交更改</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> git777github-learn.git</span><br><span class="line">git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><p>这货还能删除大文件，有需要的童鞋可以参考<a href="https://rtyley.github.io/bfg-repo-cleaner/" target="_blank" rel="noopener">官网</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://rtyley.github.io/bfg-repo-cleaner/" target="_blank" rel="noopener">官网</a></li>
<li><a href="https://debugtalk.com/post/clean-sensitive-data-from-git-history-commits/#%E9%98%85%E8%AF%BB%E6%9B%B4%E5%A4%9A" target="_blank" rel="noopener">清除历史提交记录中的敏感信息</a></li>
<li><a href="https://www.bennythink.com/git-password.html" target="_blank" rel="noopener">不小心把密码上传到 GitHub 了，怎么办</a></li>
</ul>
]]></content>
      <categories>
        <category>代码协作</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Git</tag>
        <tag>GitHub</tag>
        <tag>工具</tag>
        <tag>Arch</tag>
      </tags>
  </entry>
  <entry>
    <title>早就是优势</title>
    <url>/early-is-advantage/</url>
    <content><![CDATA[<p align="center"><br>    <img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190203214337.png" class="full-image"><br></p>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>此篇纯属扯淡</p>
</blockquote>
<p>如题。</p>
<a id="more"></a>
<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在看本文前，我希望你之前看过<a href="https://yi-yun.github.io/%E5%9B%BE%E5%BA%8A%E7%9A%84%E9%80%89%E6%8B%A9/">这篇文章</a>并申请了账号，因为白天收到站内信<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190203211950.jpg" alt></p>
<p><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190203212445.png" alt></p>
<p>可能被白嫖太多导致这个策略吧2333，时间到期你就需要掏钱了，也就意味着腾讯云对象存储无法再为用户提供免费的服务。你付费当然可以当我没说…<del>其实也没多少钱</del> </p>
<p>主要是个人不喜欢每个月或者每年提供多少钱而且图床一旦选定，更换是件很麻烦的事情</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>站在风口上，猪都会飞</p>
</blockquote>
<p>此类性质的事件买 VPS 套餐遇到的最多，其中就包括前段时间搬瓦工下架他的传家宝，让我后悔的啊。虽然速度可能不咋地，但是类似大厂家 19.99 刀一年的服务器已经很少了。虽然是小事吧，但是又让我深刻地体会到了“早就是优势”。</p>
<p>就如同时代的风口，没有人能精准预测未来的风口在哪。只能说，我觉得可能某个行业不错，学习以及积攒相关知识，厚积薄发，等待真正机会来临。</p>
<p>另外，推荐一部<a href="https://v.qq.com/x/cover/3mmj3rtxfot0nau/q0830b7hrhw.html?" target="_blank" rel="noopener">短片</a><br>
<div id="c">
  <iframe src="https://v.qq.com/txp/iframe/player.html?vid=q0830b7hrhw" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width:100%;height:100%;"> </iframe>
</div>

<script>
  change();
  window.onload = function() {
    window.onresize = change;
  };
  
  function change() {
    var c = document.getElementById("c");
    var p = c.parentNode;  // div容器的父节点，p是parent的首字母

    // 下面是适配容器的宽高
    c.style.width = p.offsetWidth + "px";
    if (navigator.userAgent.indexOf('iPad') === -1 && p.offsetWidth >= 480) {
      // 针对非iPad和div容器父节点宽度值大于OR等于480的情况，480是一个边界值
      // 采用了16:9的比例进行缩放，118px是推荐面板+进度条+哔哩哔哩入口跳转栏等元素高度数值的总和
      c.style.height = c.offsetWidth / 16 * 9 + 118 + 'px';
    } else {
      // 针对iPad或div容器父节点宽度值小于480的情况（手机）
      c.style.height = c.offsetWidth / 16 * 9 + 'px';
    }
  };
</script>

</p>
<p>嵌入视频链接<a href="https://blog.asucreyau.xyz/2018/11/19/bilibili-embed-optimize/" target="_blank" rel="noopener">参考</a></p>
]]></content>
      <categories>
        <category>日常记录</category>
      </categories>
      <tags>
        <tag>个人</tag>
        <tag>图床</tag>
        <tag>扯淡</tag>
      </tags>
  </entry>
  <entry>
    <title>DigitalOcean 的羊毛</title>
    <url>/DigitalOcean/</url>
    <content><![CDATA[<p align="center"><br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190128193052.png" class="full-image" width="650"><br></p>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>虚拟专用服务器（英语：Virtual private server，缩写为 VPS），是将一台服务器分割成多个虚拟专享服务器的服务。实现VPS的技术分为容器技术和虚拟机技术 。在容器或虚拟机中，每个VPS都可分配独立公网IP地址、独立操作系统、实现不同VPS间磁盘空间、内存、CPU资源、进程和系统配置的隔离，为用户和应用程序模拟出“独占”使用计算资源的体验。VPS可以像独立服务器一样，重装操作系统，安装程序，单独重启服务器。</p>
</blockquote>
<a id="more"></a>
<h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><ul>
<li>搭建博客</li>
<li>搭建 VPN</li>
<li>挂机</li>
<li>免流</li>
<li>etc…</li>
</ul>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>VPS 厂商比较有名的有搬瓦工，Vutlr，Linode 等，当然还有要介绍的主角 <a href="https://m.do.co/c/dff394a7904c" target="_blank" rel="noopener">DigitalOcean</a></p>
<h3 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h3><p>说下大致的体验吧，我用过 Vutlr、DigitalOcean 以及两家不支持换 IP 的小厂商</p>
<ul>
<li>Vutlr<br>日本机房延迟还行，就是容易被封 IP，虽然可更换 IP，但总归麻烦</li>
<li>DigitalOcean<br>用的 ss，换了好几个地方的机房，没有被封过一次…也可能运气好</li>
</ul>
<h2 id="羊毛"><a href="#羊毛" class="headerlink" title="羊毛"></a>羊毛</h2><blockquote>
<p>DigitalOcean 需要 <a href="https://www.paypal.com/c2/signin" target="_blank" rel="noopener">PayPal</a>，绑定国内的借记卡或者信用卡就能用</p>
</blockquote>
<p>麻烦吧，是的当初我也这么想，但换个角度，这样不也限制了很多国人来注册使用么，起码不会被 GFW 当做重点关注对象</p>
<ul>
<li>点我的<a href="https://m.do.co/c/dff394a7904c" target="_blank" rel="noopener">邀请链接</a>注册充值 5 刀就可获得 100 美元的金额<br>总共加起来是 105 美元，不过要 2 个月内花完，一辈子都没玩过 50 刀一月的服务器</li>
<li>GitHub 学生用户可获取 65 美元的金额<br>GitHub 学生认证以及 DO 优惠码都需要与两家的客服邮件沟通</li>
</ul>
<h3 id="机房选择"><a href="#机房选择" class="headerlink" title="机房选择"></a>机房选择</h3><p>机房看所处地方以及手机运营商，如果你是移动用户，那么选新加坡机房，联通和电信用户新加坡绕路美国，因为当初是新手的缘故，我选的新加坡。当回到学校联通信号时，慢的质疑人生…后来才发现，原来是联通和电信绕路。</p>
<blockquote>
<p>恕我直言，DO 的机房就一个洛杉矶，但是足够了。</p>
</blockquote>
]]></content>
      <categories>
        <category>日常记录</category>
      </categories>
      <tags>
        <tag>羊毛</tag>
        <tag>VPS</tag>
        <tag>推荐</tag>
      </tags>
  </entry>
  <entry>
    <title>Arch Linux 安装手记</title>
    <url>/install-Arch/</url>
    <content><![CDATA[<p align="center"><br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190125001003.jpg" class="full-image" width="35%/"><br></p>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>用户友好都是狗屁，用户中心才是王道。</p>
</blockquote>
<p>Arch 将这句话解释得淋漓尽致。</p>
<a id="more"></a>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote>
<p>这是一段科普 Arch 的文字</p>
</blockquote>
<p>Arch 拥有我见过的迄今为止最丰富的 Wiki<del>（维基百科：？？）</del>。与此同时，它的第三方仓库 aur 则是将开源的力量发挥到了极致。你见过一行命令就能在 Linux 上安装 QQ、TIM、微信、百度云和迅雷极速版么？另外，Arch 的社区也不输给其他发行版。相信我，你不会后悔装 Arch Linux 的。</p>
<p>我很庆幸第一台使用的主力 Linux 系统是 Arch Linux，因为它让我结识了很多朋友，也让我在 Linux 方面有更多的理解。</p>
<p>PS：如果你是新手，建议你先安装 Manjaro，这是 Arch 的衍生版，开箱即用，图形化界面安装，只需少量配置即可入我 Arch 神教。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>磁盘空间</li>
<li>一个 U盘</li>
<li>最好有根网线</li>
<li>看过 <a href="https://wiki.archlinux.org/index.php/Installation_guide" target="_blank" rel="noopener">Wiki 安装教程</a>（左侧可切换语言）</li>
</ul>
<h3 id="刻录"><a href="#刻录" class="headerlink" title="刻录"></a>刻录</h3><ol>
<li>去 <a href="http://mirrors.163.com/archlinux/iso/" target="_blank" rel="noopener">163 镜像源</a>找日期最近的镜像下载（PS：最近日期的镜像可以减少包的更新）</li>
<li>用 <a href="https://rufus.ie/" target="_blank" rel="noopener">Rufus</a> 或者其他的刻录软件将 U盘 制作成启动盘</li>
</ol>
<h3 id="引导方式"><a href="#引导方式" class="headerlink" title="引导方式"></a>引导方式</h3><ul>
<li>UEFI/GPT</li>
<li>BIOS/MBR</li>
</ul>
<p>上面是是常见的两种引导方式，斜杠右边是引导方式所对应的硬盘格式，你需要搞清楚自己电脑的引导方式。如果你想装双系统更得注意。</p>
<h3 id="磁盘空间"><a href="#磁盘空间" class="headerlink" title="磁盘空间"></a>磁盘空间</h3><p>将预计安装 Arch 的磁盘整个分区格式化，然后考虑磁盘分配。接下来是一位曾经划分磁盘空间不够的博主给你们的忠告</p>
<ol>
<li>如果你预留的空间小于 100G，请不要划分什么 /home 分区，除非你只是实验。因为你把握不好大小，即使要划分，请把根目录划的大一点，起码六四开。</li>
<li>磁盘空间不够，请不要另外划分 /var 等分区，因为你不知道到底需要多大，到时候很麻烦</li>
<li>最好另外留 1G 空间给 /boot，我不喜欢划分交换空间，而喜欢采取交换文件的形式，因为交换文件可大可小（滑稽）</li>
</ol>
<p>综上，1G /boot，剩下的留给根目录，老玩家请随意…</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>电脑引导方式是 BIOS，就拿它来举例，UEFI 无非是要多挂载一个分区</p>
</blockquote>
<h3 id="U盘启动"><a href="#U盘启动" class="headerlink" title="U盘启动"></a>U盘启动</h3><p>记得插上网线，每台电脑的 U盘 快速启动不一样，选对 U盘 则会看到下面这个界面</p>
<p><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/c2efb44313b8.gif" alt></p>
<h3 id="连接网络"><a href="#连接网络" class="headerlink" title="连接网络"></a>连接网络</h3><blockquote>
<p>当然是 <code>ping -c 4 www.baidu.com</code>，百度别的不好，但他是最好的测网络连通性的网站</p>
</blockquote>
<ul>
<li>有线连接<br>dhcpd</li>
<li>无线连接<br>输入 wifi-menu，如果名称有中文可能会乱码，我偶尔还会连不上，所以推荐有线</li>
</ul>
<h3 id="更新系统时间"><a href="#更新系统时间" class="headerlink" title="更新系统时间"></a>更新系统时间</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">timedatectl <span class="built_in">set</span>-ntp <span class="literal">true</span> <span class="comment"># 如果是双系统会涉及到时间不同步的问题</span></span><br></pre></td></tr></table></figure>
<p>时间不同步参考<a href="https://github.com/yi-yun/ArchLinux-Dotfiles/wiki/4.FAQ" target="_blank" rel="noopener">文档</a></p>
<h3 id="修改镜像文件"><a href="#修改镜像文件" class="headerlink" title="修改镜像文件"></a>修改镜像文件</h3><ol>
<li>输入 <code>vim /etc/pacman.d/mirrorlist</code></li>
<li>输入 <code>/China</code> 回车将光标移动到对应的网址，依次输入<code>dd</code>、<code>gg</code>、<code>Shift P</code></li>
<li>输入 <code>:wq</code> 保存退出</li>
</ol>
<h3 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h3><blockquote>
<p>最重要的一块内容，难就难在这里</p>
</blockquote>
<ol>
<li>输入 <code>fdisk -l</code> 查看现有可操作磁盘</li>
<li>找到选中的磁盘，例如我选中了 sdb</li>
<li><code>cfdisk sdb</code> 图形化操作磁盘空间<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190125181308.png" alt></li>
<li>我的分区是 <code>/boot</code>(Type:EFI)、<code>/</code>(Type:Linux )。记得操作完选择 write</li>
<li><code>mkfs.ext4 /dev/sdb3</code> 格式化你相对应的根分区</li>
</ol>
<h3 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h3><p>挂载就是把额外添加的磁盘分区(这里我们指的就是刚刚格式完的硬盘分区)指定在特定的文件夹下，当我们打开这个文件夹的时候，文件夹的空间大小就是使用该分区的存储空间。</p>
<p><code>/mnt</code> 文件夹是 Linux 专门挂载用的，挂载后，会在mnt里多出相应设备的目录。由于我们目前所有操作都还在 U盘 里，所以需要把磁盘分区挂载到 U盘 下的 <code>/mnt</code> 下，才能进入分区进行系统安装和配置。</p>
<p>下面是个例子<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount /dev/sdb3 /mnt <span class="comment"># 挂载根分区</span></span><br><span class="line">mkdir /mnt/boot <span class="comment"># 创建文件夹</span></span><br><span class="line">mount /dev/sdb2 /boot <span class="comment"># 挂载 /boot 分区</span></span><br></pre></td></tr></table></figure></p>
<p>挂载好可以输入 <code>lsblk</code> 查看下挂载结果</p>
<h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><blockquote>
<p>需要有网</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacstrap /mnt base base-devel <span class="comment"># 安装系统</span></span><br><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab <span class="comment"># 生成卷标</span></span><br><span class="line">arch-chroot /mnt    <span class="comment"># 进入/mnt下的系统</span></span><br></pre></td></tr></table></figure>
<h2 id="设置系统"><a href="#设置系统" class="headerlink" title="设置系统"></a>设置系统</h2><blockquote>
<p>需要对刚刚装好的系统 Arch Linux 进行必要的配置，后面操作的都是对硬盘上的 Arch Linux 操作</p>
</blockquote>
<h3 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -sf /usr/share/zoninfo/Asia/Shanghai /etc/localtime  # 设为上海时间</span><br><span class="line">hwclock --systohc --utc  # 设置硬件时间</span><br></pre></td></tr></table></figure>
<h3 id="修改编码"><a href="#修改编码" class="headerlink" title="修改编码"></a>修改编码</h3><ol>
<li><code>pacman -S vim   #安装vim</code></li>
<li><code>vim /etc/locale.gen</code></li>
<li>找到 <code>en_US.UTF-8</code> 和 <code>zh_CN.UTF-8</code>，把前面的#号删除，<code>:wq</code> 保存退出</li>
<li><code>locale-gen  #重新生成locale</code></li>
<li><code>echo LANG=en_US.UTF-8 &gt; /etc/locale.conf</code></li>
</ol>
<h3 id="主机名称"><a href="#主机名称" class="headerlink" title="主机名称"></a>主机名称</h3><blockquote>
<p>偷个懒</p>
</blockquote>
<p><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190125155852.png" alt></p>
<ul>
<li><code>passwd # 设置 root 密码</code></li>
</ul>
<h3 id="必要软件"><a href="#必要软件" class="headerlink" title="必要软件"></a>必要软件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S networkmanager ntfs-3g os-prober grub</span><br><span class="line">systemctl <span class="built_in">enable</span> NetworkManager <span class="comment"># 后面三个是引导需要的</span></span><br></pre></td></tr></table></figure>
<h3 id="安装引导"><a href="#安装引导" class="headerlink" title="安装引导"></a>安装引导</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub-install --target=i386-pc /dev/sdx （将sdx换成你安装的硬盘）</span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>
<p>双系统需要安装 <code>os-prober</code> 以及 <code>ntfs-3g</code> 后 grub 生成引导入口时就会检测出 Win10</p>
<p><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190125180817.png" alt></p>
<p>PS:如果报 <code>warning failed to connect to lvmetad，falling back to device scanning</code> 错误。简单的方法是编辑 <code>/etc/lvm/lvm.conf</code> 这个文件，找到 <code>use_lvmetad = 1</code> 将1修改为0，保存，重新配置 grub。</p>
<h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span>    <span class="comment"># 退出新系统回到启动盘系统</span></span><br><span class="line">umount -R /mnt <span class="comment"># 取消/mnt挂载</span></span><br><span class="line">reboot <span class="comment"># 重启</span></span><br></pre></td></tr></table></figure>
<p>注意这个时候你可能会卡在有两行提示的地方无法正常关机，长按电源键强制关机即可</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://wiki.archlinux.org/index.php/Installation_guide" target="_blank" rel="noopener">Arch Wiki</a></li>
<li><a href="https://www.viseator.com/2017/05/17/arch_install/" target="_blank" rel="noopener">以官方Wiki的方式安装ArchLinux</a></li>
<li><a href="https://teaper.github.io/archlinux-installation-instructions/SYSTEMINSTALL.html" target="_blank" rel="noopener">系统安装篇</a></li>
</ul>
]]></content>
      <categories>
        <category>日常记录</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Arch</tag>
        <tag>收获</tag>
        <tag>Linux</tag>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native 爬坑笔记</title>
    <url>/react-native/</url>
    <content><![CDATA[<p align="center"><br>    <img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190117142231.png" class="full-class"><br></p>

<h2 id="提要"><a href="#提要" class="headerlink" title="提要"></a>提要</h2><p>早就听说了 FaceBook 出的 <a href="https://reactnative.cn" target="_blank" rel="noopener">React Native</a> 混合开发，一套代码两个平台的应用。前几天终于有幸尝试了几个应用，折腾死我了…</p>
<a id="more"></a>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul>
<li>Android Studio<br>因为之前有一定的原生安卓开发经验，所以 Android Studio 的环境我是有的</li>
<li>Node<br>好巧，我也有，因为这个 Hexo 博客（手动滑稽）。这里要提醒新手的是最好改一下镜像链接，国外而很慢…还有记得装 yarn，比 npm 好用</li>
<li>Python<br>官网要 2.0，但是我电脑上装的 3.0，而且在 0.57 的教程里我并没有看到 Python 的安装以及路径，因为怕之后的环境冲突，所以没装</li>
</ul>
<p>PS：这里需要提醒的是…官网的教程默认是最新版，你要按需手动切换版本号</p>
<p><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190117133627.png" alt></p>
<p>不一样的版本号教程有点不一样，对没错就是 Python2 以及 Android Studio 一些东西不一样，有些版本详细，有些版本简陋（手动微笑）</p>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>尝试新东西肯定是从最开始的学起，咔咔咔按照教程的配置完，然后 <code>react-native run-android</code>，嗯？忘了打开 Android Studio，哦对了要等 Gradle 构建完成才行</p>
<p>重新插入手机，使 Android Studio 识别，然后继续 <code>react-native run-android</code>，嗯？红屏报错<br> <code>make sure your bundle is packaged correctly or you&#39;re running a packager server</code>，提示找不到 Node 服务器。官网的教程里有解决方案，在真机运行时，需要通过 <code>adb reverse tcp:8081 tcp:8081</code> 命令指定端口，端口具体无所谓，别被占用都行…</p>
<p>指定完端口，重新运行就没问题了，通过 <code>RR</code> 动态修改代码后显示，体验真的不错…</p>
<h2 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h2><p>折腾 React Native 的主要目的是跑起来搭档给我的工程</p>
<h3 id="编译问题"><a href="#编译问题" class="headerlink" title="编译问题"></a>编译问题</h3><p>Gradle 是 2.14 版本的，可能是从 GitHub 很久之前的仓库下的，下载了 Gradle，折腾了小半天，把报错啥的解决了，Gradle 终于 Build 正常了…</p>
<p>接着重新运行还是没找到服务器，很绝望…</p>
<h3 id="尝试解决"><a href="#尝试解决" class="headerlink" title="尝试解决"></a>尝试解决</h3><ul>
<li>下载 AVD<br>我是个有强迫症的人，容不得 C 盘有乱七八糟的东西，但是没办法，然而还是找不到服务器…</li>
<li>夜神模拟器<br>可能还是端口的问题</li>
<li>解决方案<br><code>react-native run-android</code> 这条命令是真的坑，询问同伴之后，换成了 <code>react-native start</code>，插上真机，然后手动去 Android Studio 右上角运行，撒花完结…</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>遇到问题多谷歌</li>
<li>多询问爬过坑的小伙伴</li>
<li>不要自己没玩过就推荐给别人，看和自己动手是两回事</li>
</ul>
]]></content>
      <categories>
        <category>日常记录</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>总结</tag>
        <tag>ReactNative</tag>
        <tag>Android</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next 博客自定义配置</title>
    <url>/Hexo-Next-Custom/</url>
    <content><![CDATA[<p align="center"><br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190114140655.png" class="full-image" width="650/"><br></p>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先说声抱歉，这是一篇亏欠很久的教程，因为我 QQ 群的一些朋友们经常问我，你博客的那些自定义是怎么弄的？其实大部分是我谷歌的，并不是我自己的方法。当然也有一部分是我自己手动写的，比如我的<a href="https://yi-yun.github.io/friends/">友链</a>。</p>
<a id="more"></a>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>这篇博客并没有划定适宜人群，只是希望你可以通过此篇教程找到适合你的配置，或者通过我的<a href="http://yi-yun.github.io">博客</a>找到一些灵感。这就是这篇教程的意义。</p>
<p>另外，需要说明的是，我的博客是 Next 6.3 版本，也没有采用数据文件夹的形式。<del>为什么呢？因为一开始我不知道</del></p>
<p>什么？你不知道 Hexo ？来来吃我一发<a href="https://easyhexo.github.io/Easy-Hexo/" target="_blank" rel="noopener">安利</a></p>
<h3 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h3><ul>
<li>如果修改方法很多，我会以 • 方式区分，分步骤则为数字</li>
<li>文件路径写在了代码块上部</li>
<li>仔细看清站点配置文件和主题配置文件</li>
<li>博客文件目录为 root 目录，即包括你的 themes/ 、source/ 文件夹等</li>
<li>效果图在每个教程最开头<br><del>如果没有就是上面几张显示了不想重复或者是单纯地忘记截了…</del></li>
</ul>
<h2 id="个性化配置"><a href="#个性化配置" class="headerlink" title="个性化配置"></a>个性化配置</h2><h3 id="修改打赏文字抖动"><a href="#修改打赏文字抖动" class="headerlink" title="修改打赏文字抖动"></a>修改打赏文字抖动</h3><ul>
<li>修改文件 <code>themes\next\source\css\_common\components\post\post-reward.styl</code> ，将 <code>hover</code> 注释即可</li>
<li>可以在配置文件中添加重叠样式（推荐）  <figure class="highlight css"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line">//二维码不抖动</span><br><span class="line"><span class="selector-id">#wechat</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">p</span>, <span class="selector-id">#alipay</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="修改打赏按钮"><a href="#修改打赏按钮" class="headerlink" title="修改打赏按钮"></a>修改打赏按钮</h3><p><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/14bb7b45-86ff-4715-8a9e-dfd0765f4589.gif" alt></p>
<ol>
<li><p>在文件中添加代码</p>
 <figure class="highlight css"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line">//打赏按钮修改</span><br><span class="line"><span class="selector-id">#rewardButton</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">35px</span>;</span><br><span class="line">    //line-height:30px; </span><br><span class="line">    <span class="selector-tag">font-size</span>: 15<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">font-family</span>: "<span class="selector-tag">PingFang</span> <span class="selector-tag">SC</span>", "<span class="selector-tag">Microsoft</span> <span class="selector-tag">YaHei</span>", <span class="selector-tag">Georgia</span>, <span class="selector-tag">sans-serif</span>;</span><br><span class="line">    <span class="selector-tag">background</span>: <span class="selector-id">#34495e</span>;</span><br><span class="line">    <span class="selector-tag">border-radius</span>: 5<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">-webkit-box-shadow</span>: 0 1<span class="selector-tag">px</span> 3<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.12</span>), 0 1<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.24</span>);</span><br><span class="line">    <span class="selector-tag">-moz-box-shadow</span>: 0 1<span class="selector-tag">px</span> 3<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.12</span>), 0 1<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.24</span>);</span><br><span class="line">    <span class="selector-tag">box-shadow</span>: 0 1<span class="selector-tag">px</span> 3<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.12</span>), 0 1<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.24</span>);</span><br><span class="line">    <span class="selector-tag">transition</span>: 0<span class="selector-class">.2s</span> <span class="selector-tag">ease-out</span>;</span><br><span class="line"></span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#649ab6</span>;</span><br><span class="line">        <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>), <span class="number">0</span> <span class="number">6px</span> <span class="number">20px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.19</span>);</span><br><span class="line">        <span class="attribute">-moz-box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>), <span class="number">0</span> <span class="number">6px</span> <span class="number">20px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.19</span>);</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>), <span class="number">0</span> <span class="number">6px</span> <span class="number">20px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.19</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改文件，将打赏字样改为</p>
 <figure class="highlight yml"><figcaption><span>themes\next\languages\zh-CN.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">reward:</span></span><br><span class="line"><span class="attr">donate:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-qrcode</span> <span class="string">fa-2x"</span> <span class="string">style="line-height:35px;"&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="attr">wechatpay:</span> <span class="string">微信支付</span></span><br><span class="line"><span class="attr">alipay:</span> <span class="string">支付宝</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="修改-busuanzi-统计功能"><a href="#修改-busuanzi-统计功能" class="headerlink" title="修改 busuanzi 统计功能"></a>修改 busuanzi 统计功能</h3><p><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190121151838.png" alt></p>
<ol>
<li><p>主题配置文件中 busuanzi 项目增加</p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">site_uv:</span> <span class="literal">true</span> <span class="comment">#total visitors</span></span><br><span class="line"><span class="attr">site_uv_icon:</span> <span class="string">user</span></span><br><span class="line"><span class="attr">site_uv_header:</span> <span class="string">访问用户：</span></span><br><span class="line"><span class="attr">site_uv_footer:</span> <span class="string">人</span></span><br><span class="line"><span class="attr">site_pv:</span> <span class="literal">true</span> <span class="comment">#total views</span></span><br><span class="line"><span class="attr">site_pv_icon:</span> <span class="string">eye</span></span><br><span class="line"><span class="attr">site_pv_header:</span> <span class="string">访问次数：</span></span><br><span class="line"><span class="attr">site_pv_footer:</span> <span class="string">次</span></span><br><span class="line"><span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">post_views_icon:</span> <span class="string">eye</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>swig 变更为</p>
 <figure class="highlight plain"><figcaption><span>themes\next\layout\_third-party\analytics\busuanzi-counter</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;i class=&quot;fa fa-&#123;&#123; theme.busuanzi_count.site_uv_icon &#125;&#125;&quot;&gt;&lt;/i&gt;&amp;nbsp</span><br><span class="line">    &#123;&#123; theme.busuanzi_count.site_uv_header &#125;&#125;</span><br><span class="line">    &lt;span class=&quot;busuanzi-value&quot; id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &#123;&#123; theme.busuanzi_count.site_uv_footer &#125;&#125;</span><br><span class="line">    </span><br><span class="line">&lt;i class=&quot;fa fa-&#123;&#123; theme.busuanzi_count.site_pv_icon &#125;&#125;&quot;&gt;&lt;/i&gt;&amp;nbsp</span><br><span class="line">    &#123;&#123; theme.busuanzi_count.site_pv_header &#125;&#125;</span><br><span class="line">    &lt;span class=&quot;busuanzi-value&quot; id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &#123;&#123; theme.busuanzi_count.site_pv_footer &#125;&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>PS: <a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">busuanzi</a> 因为在 2018.10.12 左右七牛云域名过期，导致无法显示人数，如果你的主题是旧版本，请在第二步的文件中更新为 <code>src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</code></p>
<h3 id="给文章底部加星星"><a href="#给文章底部加星星" class="headerlink" title="给文章底部加星星"></a>给文章底部加星星</h3><p>虽然是异步，但访问速度太慢，经常加载不出来</p>
<ol>
<li>在主题配置文件中搜索 <code>rating</code> 即可  </li>
<li>点击<a href="https://widgetpack.com" target="_blank" rel="noopener">此链接</a>注册账号，设置站点后，点击左侧设置， <code>site</code> 建议选私人，<code>rate</code> 选择颜色保存即可  </li>
<li>复制 ID 到配置文件，选择颜色<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20180920231905.png" alt="星图"> </li>
<li><p>添加代码，搜索 <code>rating</code>，对比代码</p>
 <figure class="highlight plain"><figcaption><span>blog\themes\next\layout\_macro\post.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">        &#123;% if theme.rating.enable %&#125;</span><br><span class="line">        &lt;div class=&quot;wp_rating&quot;&gt;</span><br><span class="line">+           &lt;div style=&quot;color: rgba(0, 0, 0, 0.75); font-size:13px; letter-spacing:3px&quot;&gt;(&amp;gt;看完记得五星好评哦&amp;lt;)&lt;/div&gt;</span><br><span class="line">            &lt;div id=&quot;wpac-rating&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改文章底部留白<br>添加如下代码  </p>
 <figure class="highlight css"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-widgets</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post-nav</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="侧边栏近期文章"><a href="#侧边栏近期文章" class="headerlink" title="侧边栏近期文章"></a>侧边栏近期文章</h3><p><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190121152310.png" alt></p>
<p>原理：去除友链，将友链换成近期文章</p>
<ol>
<li><p>添加如下代码：</p>
 <figure class="highlight"><figcaption><span>themes\next\layout\_custom\sidebar.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;% if theme.recent_posts %&#125;</span><br><span class="line">    &lt;div class="links-of-blogroll motion-element &#123;&#123; "links-of-blogroll-" + theme.recent_posts_layout  &#125;&#125;"&gt;</span><br><span class="line">    &lt;div class="links-of-blogroll-title"&gt;</span><br><span class="line">        &lt;i class="fa fa-history fa-&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;" aria-hidden="true"&gt;&lt;/i&gt;</span><br><span class="line">        &#123;&#123; theme.recent_posts_title &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;ul class="links-of-blogroll-list"&gt;</span><br><span class="line">        &#123;% set posts = site.posts.sort('-date') %&#125;</span><br><span class="line">        &#123;% for post in posts.slice('0', '5') %&#125;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;</span><br><span class="line">            &lt;a href="&#123;&#123; url_for(post.path) &#125;&#125;" title="&#123;&#123; post.title &#125;&#125;" target="_blank"&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在主题配置文件中配置</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">recent_posts_title: 近期文章</span><br><span class="line">recent_posts_layout: block</span><br><span class="line">recent_posts: true</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="复制文本添加版权信息"><a href="#复制文本添加版权信息" class="headerlink" title="复制文本添加版权信息"></a>复制文本添加版权信息</h3><ol>
<li><p>在 <code>themes\next\source\js\src</code> 新建 <code>copy.js</code>，代码如下：</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addLink</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">var</span> body_element = <span class="built_in">document</span>.body; <span class="keyword">var</span> selection;</span><br><span class="line">    selection = <span class="built_in">window</span>.getSelection(); </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.clipboardData) &#123; <span class="comment">// Internet Explorer </span></span><br><span class="line">        <span class="keyword">var</span> pagelink =<span class="string">"\r\n\r\n 原文出自[ Yi-Yun博客 ](yi-yun.github.io) \n除特别声明外，均采用CC BY-NC-SA 4.0许可协议\n转载请保留原文链接: "</span>+<span class="built_in">document</span>.location.href+<span class="string">""</span>; </span><br><span class="line">        <span class="keyword">var</span> copytext = selection + pagelink;</span><br><span class="line">        <span class="built_in">window</span>.clipboardData.setData (<span class="string">"Text"</span>, copytext); </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> pagelink = <span class="string">"&lt;br/&gt;原文出自[ Yi-Yun博客 ](yi-yun.github.io)&lt;br/&gt;除特别声明外，均采用 CC BY-NC-SA 4.0 许可协议&lt;br/&gt;转载请保留原文链接: "</span>+<span class="built_in">document</span>.location.href+<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">var</span> copytext = selection + <span class="string">"&lt;br/&gt;"</span>+pagelink;</span><br><span class="line">        <span class="keyword">var</span> newdiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">        newdiv.style.position=<span class="string">'absolute'</span>;</span><br><span class="line">        newdiv.style.left=<span class="string">'-99999px'</span>;</span><br><span class="line">        body_element.appendChild(newdiv);</span><br><span class="line">        newdiv.innerHTML = copytext;</span><br><span class="line">        selection.selectAllChildren(newdiv);</span><br><span class="line">        <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; body_element.removeChild(newdiv);&#125;,<span class="number">0</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">document</span>.oncopy = addLink;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <code>next\layout\_layout.swig</code> 文件中，添加引用（注：在swig末尾添加）：</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/copy.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="添加-DaoVioce"><a href="#添加-DaoVioce" class="headerlink" title="添加 DaoVioce"></a>添加 DaoVioce</h3><p>很多灵感都是逛博客获得的</p>
<h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><p>首先在<a href="http://www.daovoice.io/" target="_blank" rel="noopener"> DaoVoice </a>注册个账号，点击-&gt;<a href="http://dashboard.daovoice.io/get-started?invite_code=cbaf2df2" target="_blank" rel="noopener">邀请码</a>是 <code>cbaf2df2</code>。</p>
<h4 id="获取-app-id"><a href="#获取-app-id" class="headerlink" title="获取 app_id"></a>获取 app_id</h4><p>点击左侧应用设置-&gt;安装到网站<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20180915132419.png" alt><br>在代码中找到 <code>app_id</code></p>
<h4 id="修改head-swig"><a href="#修改head-swig" class="headerlink" title="修改head.swig"></a>修改head.swig</h4><p>在<code>themes\next\layout\_custom\head.swig</code>添加如下代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.daovoice %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  (<span class="function"><span class="keyword">function</span>(<span class="params">i,s,o,g,r,a,m</span>)</span>&#123;i[<span class="string">"DaoVoiceObject"</span>]=r;i[r]=i[r]||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;(i[r].q=i[r].q||[]).push(<span class="built_in">arguments</span>)&#125;,i[r].l=<span class="number">1</span>*<span class="keyword">new</span> <span class="built_in">Date</span>();a=s.createElement(o),m=s.getElementsByTagName(o)[<span class="number">0</span>];a.async=<span class="number">1</span>;a.src=g;a.charset=<span class="string">"utf-8"</span>;m.parentNode.insertBefore(a,m)&#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">"script"</span>,(<span class="string">'https:'</span> == <span class="built_in">document</span>.location.protocol ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">"//widget.daovoice.io/widget/0f81ff2f.js"</span>,<span class="string">"daovoice"</span>)</span></span><br><span class="line"><span class="javascript">  daovoice(<span class="string">'init'</span>, &#123;</span></span><br><span class="line"><span class="javascript">      app_id: <span class="string">"&#123;&#123;theme.daovoice_app_id&#125;&#125;"</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">  daovoice(<span class="string">'update'</span>);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<h4 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h4><p>文件末尾添加如下代码<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Online contact</span></span><br><span class="line"><span class="attr">daovoice:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">daovoice_app_id:</span>   <span class="comment"># 这里填你刚才获得的 app_id</span></span><br></pre></td></tr></table></figure></p>
<p>至此，网页的在线联系功能已经完成，<code>hexo s</code> 可查看页面，窗口和位置可自行配置</p>
<h4 id="聊天窗口配置"><a href="#聊天窗口配置" class="headerlink" title="聊天窗口配置"></a>聊天窗口配置</h4><p>我的配置</p>
<p><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20180915133331.png" alt></p>
<h4 id="绑定微信"><a href="#绑定微信" class="headerlink" title="绑定微信"></a>绑定微信</h4><p>在用户界面点击右上角头像即可扫码绑定，即时通信可在微信小程序中</p>
<h3 id="添加吉祥物"><a href="#添加吉祥物" class="headerlink" title="添加吉祥物"></a>添加吉祥物</h3><ol>
<li><p>安装依赖</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br><span class="line">npm install --save live2d-widget-model-wanko</span><br></pre></td></tr></table></figure>
</li>
<li><p>站点配置</p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-helper-live2d配置，参考https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line"><span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line"><span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line"><span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">model:</span></span><br><span class="line">    <span class="attr">scale:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-wanko</span></span><br><span class="line"><span class="attr">display:</span></span><br><span class="line">    <span class="attr">superSample:</span> <span class="number">2</span> <span class="comment"># 超采样等级</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">100</span> </span><br><span class="line">    <span class="attr">height:</span> <span class="number">100</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">left</span> <span class="comment"># 位置</span></span><br><span class="line"><span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">react:</span></span><br><span class="line">    <span class="attr">opacityDefault:</span> <span class="number">0.9</span> <span class="comment"># 默认透明度</span></span><br><span class="line">    <span class="attr">opacityOnHover:</span> <span class="number">0.5</span> <span class="comment"># 鼠标移上透明度</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="网页标题崩溃欺骗"><a href="#网页标题崩溃欺骗" class="headerlink" title="网页标题崩溃欺骗"></a>网页标题崩溃欺骗</h3><ol>
<li><p>添加 JavaScript 代码<br>在 <code>themes\next\source\js\src</code> 文件夹下创建<code>crash_cheat.js</code>，添加代码：</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> OriginTitle = <span class="built_in">document</span>.title;</span><br><span class="line"><span class="keyword">var</span> titleTime;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'visibilitychange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.hidden) &#123;</span><br><span class="line">        $(<span class="string">'[rel="icon"]'</span>).attr(<span class="string">'href'</span>, <span class="string">"/img/TEP.ico"</span>);</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">'╭(°A°`)╮ 页面崩溃啦 ~'</span>;</span><br><span class="line">        clearTimeout(titleTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">'[rel="icon"]'</span>).attr(<span class="string">'href'</span>, <span class="string">"/favicon.ico"</span>);</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">'(ฅ&gt;ω&lt;*ฅ) 噫又好了~'</span> + OriginTitle;</span><br><span class="line">        titleTime = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.title = OriginTitle;</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ol>
<li>引用<br>在<code>themes\next\layout\_layout.swig</code>文件中，添加引用（注：在swig末尾添加）：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/crash_cheat.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
<h3 id="文末添加结束标记"><a href="#文末添加结束标记" class="headerlink" title="文末添加结束标记"></a>文末添加结束标记</h3><figure class="highlight html"><figcaption><span>themes\next\layout\_macro\passage-end-tag.swig</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> </span><br><span class="line">   &#123;% if not is_index %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;</span>-------------本文结束<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-paw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>感谢您的阅读-------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="修改网页底部的桃心"><a href="#修改网页底部的桃心" class="headerlink" title="修改网页底部的桃心"></a>修改网页底部的桃心</h3><p>更改主题配置文件中的图标名字即可</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">icon:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user</span>  </span><br><span class="line">    <span class="attr">animated:</span> <span class="literal">true</span> </span><br><span class="line">    <span class="attr">color:</span> <span class="string">"#808080"</span></span><br></pre></td></tr></table></figure>
<h3 id="透明"><a href="#透明" class="headerlink" title="透明"></a>透明</h3><p>找到自己相应的 Scheme 下的相关文件，我的是 Pisces<br><code>themes\next\source\css\_schemes\Pisces\_layout.styl</code></p>
<ul>
<li>背景<br>.content-wrap</li>
<li>菜单栏<br>.header-inner</li>
</ul>
<p><code>themes\next\source\css\_schemes\Pisces\_sidebar.styl</code></p>
<ul>
<li>侧边栏<br>.sidebar-inner</li>
</ul>
<p>找到 <code>background</code>属性更改为 <code>background: rgba(255,255,255,0.7)</code> 即为透明度30%的白色</p>
<h3 id="更改-sidebar-大小"><a href="#更改-sidebar-大小" class="headerlink" title="更改 sidebar 大小"></a>更改 sidebar 大小</h3><p>找到 <code>themes\next\source\js\src\util.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateSidebarHeight</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">    height = height || <span class="string">'auto'</span>;</span><br><span class="line">    $(<span class="string">'.site-overview, .post-toc'</span>).css(<span class="string">'max-height'</span>, height);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>可在 <code>height</code> 后加50</p>
<h3 id="底部加上运行时间"><a href="#底部加上运行时间" class="headerlink" title="底部加上运行时间"></a>底部加上运行时间</h3><p>在 <code>hexo\themes\[your theme]\layout</code> 文件夹下找到你的 <code>footer</code> 文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;span id="timeDate"&gt;载入天数...&lt;/span&gt;</span><br><span class="line">&lt;span id="times"&gt;载入时分秒...&lt;/span&gt; </span><br><span class="line">&lt;<span class="selector-tag">script</span>&gt; </span><br><span class="line">    var now = new Date(); </span><br><span class="line">    <span class="selector-tag">function</span> <span class="selector-tag">createtime</span>() &#123;</span><br><span class="line">    var grt= new Date("02/14/2018 12:49:00");</span><br><span class="line">    //此处修改你的建站时间或者网站上线时间 </span><br><span class="line">    <span class="selector-tag">now</span><span class="selector-class">.setTime</span>(<span class="selector-tag">now</span><span class="selector-class">.getTime</span>()+250); </span><br><span class="line">    days = (now - grt ) / 1000 / 60 / 60 / 24; </span><br><span class="line">    dnum = Math.floor(days); hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); </span><br><span class="line">    hnum = Math.floor(hours); </span><br><span class="line">    if(String(hnum).length ==1 )&#123;</span><br><span class="line">        hnum = "0" + hnum;</span><br><span class="line">    &#125; </span><br><span class="line">    minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);</span><br><span class="line">    mnum = Math.floor(minutes); if(String(mnum).length ==1 )</span><br><span class="line">    &#123;</span><br><span class="line">       mnum = "0" + mnum;</span><br><span class="line">    &#125; </span><br><span class="line">    seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);</span><br><span class="line">    snum = Math.round(seconds);</span><br><span class="line">    if(String(snum).length ==1 )&#123;snum = "0" + snum;&#125; </span><br><span class="line">    document.getElementById("timeDate").innerHTML = "本站已安全运行 "+dnum+" 天 ";</span><br><span class="line">    document.getElementById("times").innerHTML = hnum + " 小时 " + mnum + " 分 " + snum + " 秒";</span><br><span class="line">&#125; </span><br><span class="line">    <span class="selector-tag">setInterval</span>("<span class="selector-tag">createtime</span>()",250); </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="鼠标爆炸特效"><a href="#鼠标爆炸特效" class="headerlink" title="鼠标爆炸特效"></a>鼠标爆炸特效</h3><ol>
<li><p>下载这个<a href="https://caomsacid0-my.sharepoint.com/:u:/g/personal/yi-yun_caoms_ac_id/Ebs_zX_f6hFIpHCeH-yjDYcBSHF3jToKMF5Vb0119c4K4g?e=SmbQbk" target="_blank" rel="noopener">脚本</a>，放在 <code>themes\next\source\js\src</code> </p>
</li>
<li><p>修改代码</p>
 <figure class="highlight"><figcaption><span>themes\next\layout\_layout.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;% if theme.fireworks %&#125;</span><br><span class="line">&lt;canvas class="fireworks" style="position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;" &gt;&lt;/canvas&gt; </span><br><span class="line">&lt;script type="text/javascript" src="//cdn.bootcss.com/animejs/2.2.0/anime.min.js"&gt;&lt;/script&gt; </span><br><span class="line">&lt;script type="text/javascript" src="/js/src/fireworks.js"&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开主题配置文件，在里面最后写下：</p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">fireworks:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h2><p><strong>看个人喜好修改，不一定要改的一模一样</strong></p>
<h3 id="首页title优化"><a href="#首页title优化" class="headerlink" title="首页title优化"></a>首页title优化</h3><p>更改 <code>index.swig</code> 文件 <code>themes\next\layout</code>   </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; &#123;% endblock %&#125;</span><br><span class="line">&#123;% block title %&#125; &#123;&#123; theme.keywords &#125;&#125; - &#123;&#123; config.title &#125;&#125;&#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125;</span><br><span class="line">&#123;% block title %&#125;&#123;&#123; theme.description &#125;&#125;-&#123;&#123; title &#125;&#125;&#123;% if theme.index_with_subtitle and subtitle %&#125; – &#123;&#123; subtitle &#125;&#125;&#123;% endif %&#125;&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="修改文章链接"><a href="#修改文章链接" class="headerlink" title="修改文章链接"></a>修改文章链接</h3><p>编辑站点 <code>_config.yml</code> 文件，修改其中的 <code>permalink</code> 字段改为 <code>permalink: :title.html</code> 即可。</p>
<h3 id="添加“nofollow”标签"><a href="#添加“nofollow”标签" class="headerlink" title="添加“nofollow”标签"></a>添加“nofollow”标签</h3><ul>
<li><p>修改代码</p>
  <figure class="highlight html"><figcaption><span>\themes\next\layout_partials\footer.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;&#123; __('footer.powered', '<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"theme-link"</span> <span class="attr">href</span>=<span class="string">"http://hexo.io"</span> <span class="attr">rel</span>=<span class="string">"external nofollow"</span>&gt;</span>Hexo<span class="tag">&lt;/<span class="name">a</span>&gt;</span>') &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"theme-link"</span> <span class="attr">href</span>=<span class="string">"https://github.com/iissnan/hexo-theme-next"</span> <span class="attr">rel</span>=<span class="string">"external nofollow"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>同理，sidebar.swig也作如下修改</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://creativecommons.org/licenses/&#123;&#123; theme.creative_commons &#125;&#125;/4.0"</span> <span class="attr">class</span>=<span class="string">"cc-opacity"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">rel</span>=<span class="string">"external nofollow"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; link &#125;&#125;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">rel</span>=<span class="string">"external nofollow"</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="推荐工具"><a href="#推荐工具" class="headerlink" title="推荐工具"></a>推荐工具</h2><ul>
<li><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a></li>
<li><a href="https://www.google.com/intl/zh-CN_ALL/chrome/" target="_blank" rel="noopener">Chrome 浏览器</a>（不接受反驳）</li>
<li><a href="https://yi-yun.github.io/%E5%9B%BE%E5%BA%8A%E7%9A%84%E9%80%89%E6%8B%A9/">博客图床解决方案</a></li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>很久以前的事情了…有些参考链接找不到了，有侵权的请联系我补。</p>
<ul>
<li><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">打造个性超赞博客 Hexo + NexT + GitHub Pages 的超深度优化</a></li>
<li><a href="https://blog.dongleizhang.com/posts/89dad1c1/#comments" target="_blank" rel="noopener">Hexo NexT 博客增加知乎豆瓣图标支持</a></li>
<li><a href="https://easyhexo.github.io/Easy-Hexo/" target="_blank" rel="noopener">Easy Hexo</a></li>
</ul>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>配置笔记</tag>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>GitHub</tag>
        <tag>Blog</tag>
        <tag>Custom</tag>
      </tags>
  </entry>
  <entry>
    <title>强迫症对 CRLF 和 LF 的执念</title>
    <url>/CRLF-vs-LF/</url>
    <content><![CDATA[<p align="center"><br>    <img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190112203817.png" class="full-class"><br></p>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote>
<p>CRLF 以及 LF 是用来表示文本换行的方式。CR(Carriage Return)代表回车，对应字符<code>\r</code>；LF(Line Feed)代表换行，对应字符<code>\n</code><br>由于历史原因，不同的操作系统文本使用的换行符各不相同。主流的操作系统一般使用 CRLF 或者 LF 作为其文本的换行符。其中，Windows 系统使用的是 CRLF，Unix 系统(包括 Linux，MacOS 近些年的版本)使用的是 LF。</p>
</blockquote>
<a id="more"></a>
<h2 id="问题的由来"><a href="#问题的由来" class="headerlink" title="问题的由来"></a>问题的由来</h2><p>各个系统间的这个换行差异让我这个强迫症饱受摧残。虽然至今并发生没有什么大问题，但是当你 Git 提交的文件更改是重新删除文件，再插入的时候，让强迫症的我很难受，更重要的是无法直接查看修改。</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>发现问题的没有头绪第一时间当然谷歌了。这一谷歌不得了，发现这个回车是挺坑的。</p>
<p>Git 的 Windows 客户端在安装时会有如下图这样的提示<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190112195503.png" alt><br>这是 Git 的自动转换，当你在签出文件时，Git 试图将 UNIX 换行符(LF)替换为 Windows 的换行符(CRLF)；当你在提交文件时，它又试图将 CRLF 替换为 LF，所以才会改变整行。</p>
<p><strong>不过可喜的是，据说新版本的 Git 已经修复了这个功能（并没有亲测）</strong>，而且我并没有找到相关的证据。另外，也有很多人用的老版本的。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="设置-Git-重要"><a href="#设置-Git-重要" class="headerlink" title="设置 Git(重要)"></a>设置 Git(重要)</h3><p>不管怎样，先设置在 Git 终端里敲下这两条命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.autocrlf <span class="literal">false</span></span><br><span class="line">git config --global core.safecrlf <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>一般敲完这两条就可以洗洗睡了~</p>
<p>下面是身为强迫症晚期的习惯</p>
<h3 id="编辑器统一"><a href="#编辑器统一" class="headerlink" title="编辑器统一"></a>编辑器统一</h3><p>将我 Windows 下的编辑器以及 IDE 统一为 Unix(/n)以及 UTF-8 的风格<del>(什么？Arch 里也要变？你火星来的吧)</del></p>
<h3 id="editorconfig"><a href="#editorconfig" class="headerlink" title=".editorconfig"></a>.editorconfig</h3><p>神器，保存时会自动格式化内容</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>去他的<a href="https://editorconfig.org/" target="_blank" rel="noopener">官网</a>看编辑器以及 IDE 是否原生支持 .editorconfig，不自带需要安装插件，然后在工程目录下<br>直接扔下这个文件完事<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root = true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">charset = utf-8</span><br><span class="line">end_of_line = lf</span><br><span class="line">insert_final_newline = true</span><br><span class="line">trim_trailing_whitespace = true</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br><span class="line"></span><br><span class="line">[*.py]</span><br><span class="line">indent_size = 4</span><br></pre></td></tr></table></figure></p>
<h4 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h4><p>原先是 CRLF 的文件第一次更改还是会全部删除后插入，但是之后提交就不会了</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/cssmagic/blog/issues/22" target="_blank" rel="noopener">GitHub Issue</a></p>
]]></content>
      <categories>
        <category>代码协作</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>个人</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 反射</title>
    <url>/JavaReflect/</url>
    <content><![CDATA[<p align="center"><br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20190104194136.png" class="full-image" width="650/"><br></p>


<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>反射应用在一些通用性比较高的代码，后续学框架或多或少是有反射的。一开始反射看不懂没关系，但要有初步印象。我是通过后来的框架的学习才明白反射真牛！<br><a id="more"></a></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote>
<p>开发时，框架大都用过配置文件来配置。在配置文件中配置了类，可以通过反射得到类的所有内容，还可以让类中的某个方法来执行</p>
</blockquote>
<blockquote>
<p>什么玩意？</p>
</blockquote>
<blockquote>
<p>说白了就是告诉你一个路径，你能获取整个类里的内容。那么，类里的内容包括什么呢</p>
</blockquote>
<ul>
<li><a href="#构造器">构造器</a></li>
<li><a href="#属性">属性</a></li>
<li><a href="#方法">方法</a></li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>准备一个测试类<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiyun.excrice.Reflect;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(String  something)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在吃"</span> + something);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在说"</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testReflect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取Class 对象</span></span><br><span class="line">        Class clazz=Class.forName(<span class="string">"com.yiyun.excrice.Reflect.Person"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取一个实例， jdk9中已过时</span></span><br><span class="line">        Object obj=clazz.newInstance();</span><br><span class="line">        System.out.println(<span class="string">"obj = "</span> + obj);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//因为权限是私有，但getConstructor()只能获取public修饰的方法getDeclaredConstructor():获取声明的方法。只要声明的就可以</span></span><br><span class="line">        Constructor&lt;?&gt; constructor=clazz.getDeclaredConstructor(<span class="keyword">int</span><span class="class">.<span class="keyword">class</span>,<span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        System.out.println(<span class="string">"constructor = "</span> + constructor);</span><br><span class="line">        <span class="comment">//newInstance会产生非法访问异常：java.lang.IllegalAccessException</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);<span class="comment">// 暴力反射私有构造器</span></span><br><span class="line">        </span><br><span class="line">        Object obj1=constructor.newInstance(<span class="number">1</span>,<span class="string">"lisi"</span>);</span><br><span class="line">        System.out.println(<span class="string">"obj1 = "</span> + obj1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//得到类对象（可以想象成模板，有了模板你才能去造其他东西）</span></span><br><span class="line">    Class clazz=Class.forName(<span class="string">"com.yiyun.excrice.Reflect.Person"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//得到声明的方法</span></span><br><span class="line">    Method method=clazz.getDeclaredMethod(<span class="string">"speak"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    method.setAccessible(<span class="keyword">true</span>);<span class="comment">//暴力反射</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这个方法需要一个实例</span></span><br><span class="line">    <span class="comment">// 静态方法不用，因为即使不 new 对象也可以调用，所以当执行静态方法时设置为 null也可以</span></span><br><span class="line">    method.invoke(clazz.newInstance(),<span class="string">"hello,yi-yun"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fieldTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//获取Class 对象</span></span><br><span class="line">    Class clazz=Class.forName(<span class="string">"com.yiyun.excrice.Reflect.Person"</span>);</span><br><span class="line"></span><br><span class="line">    Field field=clazz.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    Object obj=clazz.newInstance();</span><br><span class="line">    field.set(obj,<span class="string">"yi-yun"</span>);</span><br><span class="line">    System.out.println(<span class="string">"obj = "</span> + obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="暴力反射"><a href="#暴力反射" class="headerlink" title="暴力反射"></a>暴力反射</h3><p>以下都是摘自于极客时间《Java核心技术36讲》</p>
<ul>
<li>框架运用反射能给实体类在运行时生成 set/get 的方法</li>
<li>绕过 API 访问限制</li>
</ul>
<p>但是在 Java9 以后，这个方法的使用可能会存在一些争议，因为 Jigsaw 项目新增的模块化<br>系统，出于强封装性的考虑，对反射访问进行了限制。Jigsaw 引入了所谓 Open 的概念，只有<br>当被反射操作的模块和指定的包对反射调用者模块 Open，才能使用 setAccessible；否则，被<br>认为是不合法（illegal）操作。如果我们的实体类是定义在模块里面，我们需要在模块描述符中<br>明确声明：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> MyEntities&#123;</span><br><span class="line">    <span class="comment">//open for reflection</span></span><br><span class="line">    opens com.mycorp to java.persistence;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实，思路很简单</p>
<ol>
<li>先获取 Class 对象</li>
<li>通过 Java 内置的方法以及 Class 对象去得到操作类的方法或属性名</li>
<li>操作上面一步得到的东西，得到你想要的结果</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Java</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>2018 年终总结</title>
    <url>/final2018/</url>
    <content><![CDATA[<p align="center"><br>    <img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20181230212355.png" class="full-class"><br></p>

<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>人生中的第一篇年度总结，此时窗外飘着小雪，突然有想寻找未来另一半的冲动</p>
<a id="more"></a>
<h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><h4 id="树莓派"><a href="#树莓派" class="headerlink" title="树莓派"></a>树莓派</h4><p>很幸运，在去年九月份社团交接上，学长把树莓派作为礼物送给了我，也终于在寒假开启了心心念念了很久的树莓派之旅，以至于嵌入式课上无法在实验室连接树莓派时，我的方案取得了老师以及同学们的认同。</p>
<p>但这次折腾树莓派收获到最深的观念是，免费的是最贵的。内网穿透折腾了一个多礼拜勉强弄好，但并没有被我投入使用，原因免费的太慢。大概都有这么一个怪圈，刚开始免费的东西，方便快捷，然后用的人多，然后变卡…</p>
<h4 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h4><ul>
<li>校创<br>做的共享单车，不过做了一半…那时候 ofo 还很火呢，可惜现在就是烂摊子</li>
<li>国创<br>智能手环，答辩的时候跟信电的一组项目撞上了，抽签还是前后组…答辩的时候没有意识到评委与上一组对比的潜台词，说完以后才意识到。虽然通过了，但争取说明对比一下可能分数会高点。</li>
</ul>
<h4 id="全沾工程师"><a href="#全沾工程师" class="headerlink" title="全沾工程师"></a>全沾工程师</h4><p>大概有八九个月，在了解技术吧或者更准确点是，都接触了解了一遍，但没有深入。换句话说，没干正经事。</p>
<ul>
<li>硬件<br>有了嵌入式、计算机组成原理这种课的铺垫，了解并不能难。很遗憾的是没有把 CSAPP 这本书看完，暑假抽空看的前几章，相见恨晚</li>
<li>前端<br>主要是七月底搭建了个人博客。为了让自己界面好看一点，学习了 html、css、js ，魔改了静态博客页面。还认识了一些大佬，我博客的友链全是hhh</li>
<li>后端<br>Java Web 相关的知识，具有初步知识，目前正在学框架</li>
<li>网络<br>看完了《网络是怎样连接的》，这本书前面的基础知识讲得很好，但是后面的内容由于我水平没跟上，就很快的略过了。不过之前有过学校网络管理以及平常此类属的积累，让我能很轻松面对下半年的计算机网络以及实验的课程</li>
<li>Linux<br>暑假装了 Arch Linux ，只能说它真的很牛逼，没有之一。你体验过一行命令就能安装 QQ、TIM、微信、迅雷、百度云么？如果想，Arch 绝对不会让你后悔。我还特别喜欢他的宣传口号，“用户友好都是狗屁，用户中心才是王道”。 Arch 具有全宇宙最丰富 Linux 文档以及社区，生态超级棒</li>
</ul>
<p>虽然玩了大半年，还是在 11 月左右确定了走 J2EE 的线路，一是后端多少年来的稳定，二是个人认为未来是人工智能物联网大数据的年代，走服务端会有更多的机会</p>
<h2 id="认知"><a href="#认知" class="headerlink" title="认知"></a>认知</h2><h3 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h3><p>这是程序员的天堂，真正让我体会到开源力量的是 Arch Linux 的 Aur。大概可以理解为，开发者以及使用者为开源软件提供在 Arch Linux 平台上的支持</p>
<p>我在开源平台上也认识了很多朋友。说出来你们可能不信，年龄有11岁的六年级小朋友，在我友链里静静的躺着。还有几位虽然素不相识，但是在我今年成长的路上给出了很多宝贵的建议</p>
<p>不过也不能完全信开源的，这不刚刚爆出来 ant-design 的圣诞节彩蛋么。还有 NPM  爆出的后门么2333</p>
<h3 id="知识付费"><a href="#知识付费" class="headerlink" title="知识付费"></a>知识付费</h3><p>很多人说，2016 年是知识付费的元年，但是我表示 2016 年我才高中毕业，崇尚互联网时代万物皆可免费的概念，这也让我之后的学习或者交流过程中吃了很多亏</p>
<h4 id="知识星球"><a href="#知识星球" class="headerlink" title="知识星球"></a>知识星球</h4><p>不过后来也不知道怎么想，可能是打折吧。在暑假加入了几个知识星球，结果发现那里大都是比自己牛逼、学习比自己刻苦、来自各行各业的大牛，跟着他们发的帖子，学到了很多东西</p>
<h4 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h4><p>很遗憾的是，虽然他也很认同知识付费以及有些人宁愿花钱买游戏也不会买几本书看的观点，在系统开发设计课上提出的校园知识付费以及经验付费的 idea 被老师否决了。可能后续缺乏自己的思考以及没有考虑到推行难度，不过在过程中我还是了解到了很多分答 App 之前的问题。</p>
<h3 id="互联网"><a href="#互联网" class="headerlink" title="互联网"></a>互联网</h3><p>造成贫富差距的其实就是互联网信息差。上层的一点点风吹草动，最先知道的是富人，等到大众接到消息的时候，黄花菜都凉了…也从某一层面导致了富人越富穷人越穷</p>
<p>上系统开发的时候，老师只是稍微提了一句现在经济不太好。但这一句，我在两个月前，在知识星球里就看到了。然后在他说完这句话后的那个礼拜，就爆出新闻蘑菇街的股权被稀释了…</p>
<p>虽然可能贸易战会影响明年的春招以及秋招，但我很喜欢这句话</p>
<blockquote>
<p>如果行业发展稳健，对于成本、效率、生产力等自然不敏感，如果行业高速发展，这些甚至会被忽略，一旦等到行业不景气，这些是不得不重视的问题，甚至会催生更优质的公司与个人，市场会迎来新的机遇。</p>
</blockquote>
<blockquote>
<p>“Never waste a good recession.（不要浪费一个好的衰退期）”</p>
</blockquote>
<h3 id="人脉"><a href="#人脉" class="headerlink" title="人脉"></a>人脉</h3><p>真正的人脉不是微信好友位，而是成年人之间的价值交换。没有自己的价值，何来人脉。虽然残酷，但很现实。</p>
<h3 id="财富"><a href="#财富" class="headerlink" title="财富"></a>财富</h3><p>年初想投点指数基金。想接触更多的领域，虽然计划未来有很长的时间在互联网领域，但我还是想初涉其他领域，成长的学费交的越早越好。</p>
<h1 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h1><blockquote>
<p>等着一条条变为真香</p>
</blockquote>
<ol>
<li>自律<br>2018 年无法利用碎片化时间，虽然设置了免打扰，手总是禁不住诱惑去碰手机</li>
<li>不能再一个月更新一次博客了…<br>先立个 flag ：一星期两到三篇<br>有输入必须有输出，即使是嗟来之食，也要转化为自己的东西</li>
<li>算法<br>大一大二埋下的还是得自己填</li>
<li>春招寻找暑期实习</li>
<li>秋招<br>既然决定不考研，这是最后的稻草</li>
</ol>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>个人</tag>
        <tag>总结</tag>
        <tag>收获</tag>
        <tag>未来</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 学习笔记（一）</title>
    <url>/Springlearn/</url>
    <content><![CDATA[<p align="center"><br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20181210201215.png" class="full-image"><br></p>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>个人笔记，理解有误请指正<br><a id="more"></a></p>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><ul>
<li>控制反转<br>个人理解是将类通过 XML 或者其他形式的配置交给 Spring 管理，而 Spring 通过 Java 的反射机制在运行时进行统一的创建和组装</li>
<li>注入依赖<br>设置属性  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">class</span>=<span class="string">"com.yiyun.Spring.Ioc.HelloWord"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入数据找 set 方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hostname"</span> <span class="attr">value</span>=<span class="string">"Michael"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="元数据初涉"><a href="#元数据初涉" class="headerlink" title="元数据初涉"></a>元数据初涉</h3><p><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20181204155533.png" alt><br>Spring IoC 容器是通过读取配置文件中的元数据来管理 Bean 对象</p>
<p>配置元数据的三种方式</p>
<ul>
<li>XML</li>
<li>Annotation</li>
<li>Java Config</li>
</ul>
<h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>Java 中最重要的概念,下面代码为模拟 Spring IoC 容器管理 Bean 的方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//IoC 原理（Reflect）</span></span><br><span class="line">        String path=<span class="string">"com.yiyun.Spring.Ioc.HelloWord"</span>;</span><br><span class="line">        HelloWord world=<span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//-----Spring---------</span></span><br><span class="line">        Class clazz=Class.forName(path);<span class="comment">//反射获得字节码</span></span><br><span class="line">        Constructor con=clazz.getConstructor();</span><br><span class="line">        con.setAccessible(<span class="keyword">true</span>);<span class="comment">//可访问的</span></span><br><span class="line">        Object o=con.newInstance();</span><br><span class="line">        BeanInfo  beanInfo=Introspector.getBeanInfo(clazz,Object<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">//内省机制</span></span><br><span class="line">        PropertyDescriptor[] pds=beanInfo.getPropertyDescriptors();</span><br><span class="line">        <span class="keyword">for</span> (PropertyDescriptor ps:pds) &#123;</span><br><span class="line">            String proper=ps.getName();<span class="comment">//获取类中的所有属性</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"hostname"</span>.equals(proper))&#123;</span><br><span class="line">                ps.getWriteMethod().invoke(o,<span class="string">"yi-yun"</span>);<span class="comment">//调用 Set 方法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        world=(HelloWord)o;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        world.sayHello();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="配置相关"><a href="#配置相关" class="headerlink" title="配置相关"></a>配置相关</h3><ul>
<li>bean 中 的 id name 在 Spring3.1 之后都是 String 类型,可以用 / 开头</li>
<li>import 相关<ul>
<li><code>&lt;import resource=&quot;classpath:com/yiyun/Spring/Ioc/IoC.xml&quot;/&gt;</code></li>
<li>默认从 classpath 下找</li>
<li>只有在框架中实现了 Resource 接口才能识别 file 或 classpath 等</li>
</ul>
</li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul>
<li>传统测试<br>需要开闭 Spring 并且非正常关闭</li>
<li>框架内测试<br>Spring5 的测试框架是依赖 Junit5,建议用这个快捷方便  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringJUnitConfig</span><span class="comment">//按照测试类路径下，找测试类-context.xml</span></span><br><span class="line"><span class="meta">@Autowired</span><span class="comment">//自动按照类型去 Spring 寻找 bean 对象,并设置给该字段</span></span><br><span class="line"><span class="meta">@Test</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="IoC"><a href="#IoC" class="headerlink" title="IoC"></a>IoC</h2><h3 id="IoC-容器"><a href="#IoC-容器" class="headerlink" title="IoC 容器"></a>IoC 容器</h3><ol>
<li><p>不建议用 BeanFactory，而是用 ApplicationContext，它继承了 BeanFactory，提供 AOP 集成、国际化处理、事件传播、同一加载等功能</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Resource resource=<span class="keyword">new</span> ClassPathResource(<span class="string">"com/yiyun/Spring/IoC/App.xml"</span>);</span><br><span class="line">    BeanFactory beanFactory=<span class="keyword">new</span> XmlBeanFactory(resource);</span><br><span class="line">    System.out.println(<span class="string">"-----------------------------"</span>);</span><br><span class="line">    Person p=beanFactory.getBean(<span class="string">"test"</span>,Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext ctx=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/yiyun/Spring/IoC/App.xml"</span>);</span><br><span class="line">    System.out.println(<span class="string">"-----------------------------"</span>);</span><br><span class="line">    Person p=ctx.getBean(<span class="string">"test"</span>,Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Bean 创建时机</p>
</li>
</ol>
<ul>
<li>BeanFactory 有延迟初始化（懒加载）的特点，在创建容器时，不会立马去创建容器中管理的对象，去获取时才会去创建对象</li>
<li>ApplicationContext 会立马初始化 Bean</li>
</ul>
<h3 id="Bean-四种实例化"><a href="#Bean-四种实例化" class="headerlink" title="Bean 四种实例化"></a>Bean 四种实例化</h3><ol>
<li>构造器实例化（需要无参数构造器，与访问权限无关），最标准，使用最多</li>
<li>静态工厂方法实例化</li>
<li>实例工厂方法实例化</li>
<li>实现 Factory Bean 接口实例化，集成框架使用，例如 MyBatis : org.mybatis.spring.SqlSessionFactoryBean<br> -注： BeanFactory 强调 Bean 工厂，FactoryBean 强调工厂对象<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20181210185514.png" alt></li>
</ol>
<h3 id="Bean-的作用域"><a href="#Bean-的作用域" class="headerlink" title="Bean 的作用域"></a>Bean 的作用域</h3><p>默认单例，prototype 为多例，即创建三次且 HashCode 不一样</p>
<ul>
<li>Struct1 的 Action 使用的 request，Struct2 的 Action 使用 prototype 类型，其他使用单例</li>
</ul>
<h3 id="实例化和销毁"><a href="#实例化和销毁" class="headerlink" title="实例化和销毁"></a>实例化和销毁</h3><ul>
<li>init-method </li>
<li>destroy-method</li>
</ul>
<p>细节：<br>多例模式并不会像单例模式一样去销毁，需要手动销毁，调用 close （美其名曰：节约资源）。<br>另外，不用 Spring 测试框架的话，资源不会被正常释放，Spring 容器没有正常关闭，需要手动关闭。</p>
<ul>
<li>采用 Lombok @cleanup 注解释放资源</li>
<li>把 Spring 线程作为 JVM 的子线程<br>registerShutdownHook()</li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Java</tag>
        <tag>框架</tag>
        <tag>Spring</tag>
        <tag>IoC</tag>
        <tag>AOP</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 安装配置</title>
    <url>/MySQL-Install/</url>
    <content><![CDATA[<p align="center"><br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20181118174107.png" class="full-image"><br></p>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>扯淡：从开始想的一周一更变成了一月一更······</p>
<p>此篇博客记录 Windows10 下的 MySQL 安装以及爬坑过程。我们安装的 MySQL 版本是 mysql-essential-5.6.0-m4-win32，就安装的每个步骤，说明每个对应选项的内容。</p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>注意要以管理员身份运行！！！</strong></p>
<ol>
<li>License Agreement 打钩，Next</li>
<li>选择安装目录，可以点击 Change 自主修改，比如E:\Program Files (x86)\MySQL\MySQL Server 5.6\<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20181118162629.png" alt></li>
<li>点击 Install，安装结束后，打钩 Configuration Wizard，开始配置数据库<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20181118162730.png" alt></li>
</ol>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol>
<li>配置类型选择 Detailed Configuration 选项<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20181118162818.png" alt></li>
<li>机器类别选择，开发模式 Developer Machine<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20181118162913.png" alt></li>
<li>选择 Multifunctional Database，Next<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20181118162951.png" alt></li>
<li>设置 Tablespace 的目录到 E 盘的\MySQL Datafiles\<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20181118163137.png" alt></li>
<li>Server Instance 设置为 Manual Setting 默认数值15<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20181118163237.png" alt></li>
<li>数据库的端口默认为 3306<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20181118163307.png" alt></li>
<li>Character Set 默认设置为 Standard Character Set<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20181118163339.png" alt><br>PS：涉及<a href="#编码">编码问题</a>，后面会讲，可先设置为标准</li>
<li><p>Service 名称默认为 MySQL，并且将可运行程序的目录包含在 PATH 目录中<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20181118163438.png" alt></p>
</li>
<li><p>数据库根用户的密码设置，即安装数据库后的第一个用户的密码设定，类似于 Windows 安装时的 root 用户密码设定<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20181118163459.png" alt></p>
</li>
<li><p>数据库配置设定完毕后，点击 Execute 后，进行配置<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20181118163547.png" alt></p>
</li>
</ol>
<h2 id="常用命令介绍"><a href="#常用命令介绍" class="headerlink" title="常用命令介绍"></a>常用命令介绍</h2><ul>
<li><p>登录<br>以管理员身份运行 CMD 或者 PowerShell，输入 <code>mysql -u root -p</code>，在接下来输入刚刚设定的密码即可进入控制台<br>因为是以管理员身份安装的，所以要以管理员身份运行数据库。个人猜测跟环境变量有关。</p>
</li>
<li><p>查看数据库<br><code>show databases;</code></p>
</li>
<li><p>选择数据库<br><code>use 数据库名字;</code></p>
</li>
<li><p>查看数据库中的表<br><code>show tables;</code></p>
</li>
</ul>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="假死"><a href="#假死" class="headerlink" title="假死"></a>假死</h3><p>在最后一步执行 Excute 的时候会发生假死现象，原因是没有以管理员身份运行或者是 Win10 的版本兼容性问题。</p>
<p>解决方案：不用卸载，安装好了，只是配置的时候卡了。个人建议先等，如果等了十多分钟还没好，去安装目录下找到 <code>MySQLInstanceConfig.exe</code> 这个程序右键以管理员身份运行重新配置。</p>
<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>如果按照上面来的话，默认编码时拉丁文，拉丁文不支持中文字符。这个编码问题不处理好，会为之后的学习造成很大的影响（我就是其中一个）</p>
<p>原理：Windows 最蛋疼的点是它的终端是 gbk 编码，什么你要改成 utf-8 编码？不存在的！对，没错，我知道终端右键设置能改，但是没啥用重启环境变量后还是 gbk，所以还要改注册表。你不如直接修改数据库的客户端编码呢!</p>
<p>解决方案：找到 MySQL 安装目录下的 my.ini 文件，修改对应的编码<br><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="attr">default-character-set</span>=gbk</span><br></pre></td></tr></table></figure></p>
<p>还不行的话请看<a href="https://www.bilibili.com/video/av20652930/?p=299" target="_blank" rel="noopener">编码问题视频</a></p>
<h2 id="点我下载"><a href="#点我下载" class="headerlink" title="点我下载"></a><a href="https://caomsacid0-my.sharepoint.com/:u:/g/personal/yi-yun_caoms_ac_id/Eab6Aj1vPsxOsbINnuZ1wxcBySW_ANSjSA0nwcza37lpiQ?e=DISgby" target="_blank" rel="noopener">点我下载</a></h2>]]></content>
      <categories>
        <category>win 配置</category>
      </categories>
      <tags>
        <tag>配置笔记</tag>
        <tag>软件</tag>
        <tag>MySQL</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 使用</title>
    <url>/Git%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p align="center"><br>    <img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20181020203310.png" class="full-class"><br></p>


<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>主要是简单的 Git 命令介绍，初衷是看完这篇文章能直接上手在 GitHub 上 <code>New pull request</code> 进行项目开发</p>
<a id="more"></a>
<h2 id="多平台初始化"><a href="#多平台初始化" class="headerlink" title="多平台初始化"></a>多平台初始化</h2><p><strong>极其重要，不然 merge 时代码会很乱</strong></p>
<ol>
<li><p>编辑器改成（UX）模式</p>
<ul>
<li>换行符采用 LF</li>
<li>UTF-8 编码</li>
</ul>
</li>
<li><p>Git 命令行配置</p>
<ul>
<li><code>git config --global core.safecrlf true</code></li>
<li><code>git config --global core.autocrlf false</code>  </li>
</ul>
</li>
</ol>
<p>原因见<a href="https://github.com/cssmagic/blog/issues/22" target="_blank" rel="noopener">链接</a></p>
<h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><p>本文采用的是 pull request 的方式，因为这样可以进行 code review</p>
<ol>
<li><p>Fork 源仓库<br>点击 <code>Fork</code> 按钮将项目复制到自己的仓库</p>
</li>
<li><p>拉取本地仓库<br>用 <code>git clone 项目地址</code> 到自己电脑上，嫌慢的朋友见<a href="#设置代理">这里</a></p>
</li>
<li><p>开发<br>你可以在 master 分支上开发，也可以再新建一个 dev 分支（看项目大小以及简易程度）<br>开发完以后，<code>git add . &amp;&amp; git commit -m &#39;注释&#39; &amp;&amp; git push</code></p>
</li>
<li><p>创建合并请求<br>打开网页进入 Fork 的项目，然后点击 <code>New pull request</code>，最后点击 <code>Create pull request</code> 按钮，添加一段注释，源仓库的管理员就能收到你的请求<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20181020212913.png" alt></p>
</li>
<li><p>同步<br>如果过了一礼拜作者或其他人员对仓库的代码进行了修改，源代码变了，你本地的代码还是前几天的。<br>这时候你需要使用 Git 命令 <code>git fetch 源仓库地址 master:分支名</code> （分支名自己取，不建议直接拉取到主分支），然后 <code>git merge 分支名</code> 即可同步代码（有冲突就处理冲突）</p>
</li>
</ol>
<h2 id="一些小技巧"><a href="#一些小技巧" class="headerlink" title="一些小技巧"></a>一些小技巧</h2><h3 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h3><p>GayHub 被墙的厉害，这步以及下步没有代理的忽略</p>
<p><code>git config --global http.proxy &#39;socks5://127.0.0.1:1080&#39;</code><br><code>git config --global https.proxy &#39;socks5://127.0.0.1:1080&#39;</code></p>
<p>因为访问 GitHub 走的代理，用 https 连接的主机提交会有点问题，可以使用 ssh 链接提交。更改主机连接方法点<a href="#更改远程仓库指向-remote-url">这里</a></p>
<h3 id="取消代理"><a href="#取消代理" class="headerlink" title="取消代理"></a>取消代理</h3><p><code>git config --global --unset http.proxy</code></p>
<p><code>git config --global --unset https.proxy</code></p>
<h3 id="更改远程仓库指向-remote-url"><a href="#更改远程仓库指向-remote-url" class="headerlink" title="更改远程仓库指向 remote url"></a>更改远程仓库指向 remote url</h3><ul>
<li><code>git remote set-url origin yoururl</code></li>
<li><code>git config -e</code>  熟悉 vim 的朋友可以使用，最后记得保存（个人喜欢这种方式）</li>
</ul>
]]></content>
      <categories>
        <category>代码协作</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>奇淫怪技</tag>
        <tag>配置笔记</tag>
        <tag>软件</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>可能是最佳的免费图床</title>
    <url>/%E5%9B%BE%E5%BA%8A%E7%9A%84%E9%80%89%E6%8B%A9/</url>
    <content><![CDATA[<p></p><p align="center"><br>  <img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/TIM图片20180915163013.gif" alt="IMG_5686.jpg" title="IMG_5686.jpg" width="250"><br></p><br>这张图仔细看，老司机可能深有体会<p></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>网络相册，或叫在线相册，为运行、储存以及翻阅、分享于網際網路的相簿，由于在线相册不是实质 … 相册会给免费用户提供较少的月流量，成为付费用户之后，可外链流量将获得提升；也有网站专门提供免费外链服务（此类网站又称<em>图床</em>），不限流量。        –维基百科</p>
</blockquote>
<a id="more"></a>
<p>换句话讲，图床是一种专门存储图片的地方，分享以链接的形式，应用于诸多场景，尤其是应用于博客图片的插入<del>（可能我只有写博客的时候才用到图床）</del>。不说100%，99% 写博客的人，都需要一个图床（稳不稳定另说），总不至于把图片放在站点的 <code>src/image</code> 目录下吧</p>
<h2 id="图床平台"><a href="#图床平台" class="headerlink" title="图床平台"></a>图床平台</h2><p>目前主要分为两种</p>
<ul>
<li><p>公共图床</p>
<ul>
<li><a href="https://sm.ms/" target="_blank" rel="noopener">SM.MS</a><br>其实还不错，但公共的图床还是不舒服</li>
<li><a href="http://picupload.service.weibo.com/interface/" target="_blank" rel="noopener">微博图床</a><br>说实话也还行，不过速度优化可能差点。</li>
</ul>
<p>公共图床都有致命的缺点用的人多。哪天跑路了，你博客文章没图片显示都没地方哭去···</p>
</li>
<li><p>自建图床</p>
<ul>
<li>VPS<br>自搭麻烦，并且采用这种方案意味着你不能重装 VPS 的系统…</li>
<li>七牛云<br>需要实名认证，七牛图片分享链接的 ssl 按流量计费</li>
<li>又拍云<br>也要实名认证，计费方式与七牛云相似，但可以通过加入又拍联盟可以拥有免费流量和容量<br>听起来还不错吧，但是实名认证太坑了。需要手持身份证正面和手持身份证反面，注意是手持身份证反面！不是单纯的身份证反面！反正我没拍照上传的习惯···加上支付宝芝麻信用没过700，所以放弃了</li>
</ul>
<p>综上，如果付费的话，七牛云挺好的且不贵。但不是不想当金钱的奴隶嘛，所以才有了此文</p>
</li>
</ul>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>既不想做金钱的奴隶，又想有高质量的服务怎么办呢？所以就有了相应的需求</p>
<ul>
<li>一定的免费空间以及流量</li>
<li>支持 SSL</li>
<li>访问速度</li>
</ul>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>说实话，我当初找得快放弃了，仔细一想七牛云也不错而且便宜，何必要死心眼找免费的呢</p>
<ul>
<li><p><a href="https://cloud.tencent.com/product/cos" target="_blank" rel="noopener">腾讯云对象存储</a></p>
<p>只需绑定银行卡的 QQ 或者微信实名认证就可得到免费额度</p>
<p><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20181011125507.png" alt></p>
<ul>
<li>文档丰富<br>我还用 Python SDK 在 iOS 上写了图片上传的<a href="https://github.com/yi-yun/PicgoScript" target="_blank" rel="noopener">脚本</a>呢</li>
<li>官网称，提供全球400+节点加速，支持SSL，支持防盗链，支持API调用<br>之前在没找到好用的图床之前用的 <a href="https://sm.ms/" target="_blank" rel="noopener">SM.MS</a>，用了腾讯云之后图片显示速度明显提升了<del>（没有具体数据，可能心理作用？）</del></li>
</ul>
</li>
</ul>
<p>  再来吹一下腾讯云对象存储<del>（暗示腾讯云给广告费）</del>，对象存储不光能用在图床，传小型的视频也是极佳的选择，可以在博客里显示<br>  还可以开 CDN 加速，对，你没有听错，可以给对象存储开 CDN 加速。当然只有每月免费的 10G，对小型不打算花钱的博客是极佳的选择</p>
<h3 id="图床上传工具"><a href="#图床上传工具" class="headerlink" title="图床上传工具"></a>图床上传工具</h3><ul>
<li><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a><br>在 GitHub 上的开源神器，全平台（Mac/Windows/Linux），使用 <a href="https://github.com/Molunerfinn/PicGo/wiki" target="_blank" rel="noopener">Wiki</a> 丰富，上手简单，成功被圈粉</li>
<li><a href="https://itunes.apple.com/cn/app/id1101244278?ls=1&amp;mt=12" target="_blank" rel="noopener">iPic</a><br>很多人推荐，但恕我买不起 Mac···</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>能用钱解决的事情真的不要花费时间去寻找免费的事，这次算是成功了，但下次呢？为了找好用免费的图床，时间浪费了起码有两三天。这也是文章开头图片的意义所在···</p>
<p><strong>参考文章</strong><br><a href="https://sspai.com/post/40499" target="_blank" rel="noopener">嗯，图片就交给它了</a></p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>图床</tag>
        <tag>对象存储</tag>
        <tag>工具推荐</tag>
      </tags>
  </entry>
  <entry>
    <title>win10 软件推荐（附下载链接）</title>
    <url>/win10%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p align="center"><br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/background-720224__340.jpg" class="full-image"><br></p>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>重装系统过的朋友肯定很头疼要安装哪些软件？很多都是之前网上找的，并没有保存安装包，导致后续有很多麻烦。</p>
<p>本篇文章主要为了解决这个问题，当然里面的软件也只是符合博主的个人口味，按需获取。</p>
<p><strong>系统兼容性说明：博主大概率以后重装 win10 1803 专业版起步，有些软件兼容性不是很好，请自行在属性兼容性进行测试！</strong></p>
<a id="more"></a>
<h2 id="驱动安装"><a href="#驱动安装" class="headerlink" title="驱动安装"></a>驱动安装</h2><p>很多人仍使用的是 PE 包中的万能驱动，所谓万能并不是真正的“万能”，某些驱动在某品牌某型号电脑里不生效，偶尔还会蓝屏！当然那是属于驱动特别倒霉类型的！一般图省事，打万能驱动就完事了。</p>
<p>我还是比较推荐以下两款第三方驱动</p>
<ul>
<li><p>驱动精灵<br>虽然官网上下的软件有点流氓，具有开机占用 CPU、默默更新等一系列症状，但某大佬封装的去广告绿色版还是不错的</p>
</li>
<li><p><a href="http://www.160.com/" target="_blank" rel="noopener">驱动人生</a><br>老版本还行，新版本没用过，经常是我其他驱动打崩后的首选，表现还不错！</p>
</li>
</ul>
<h3 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h3><ul>
<li>问：win10 新版本不是会自动更新驱动么？为什么还要装驱动？<br>答：没错，但博主曾经重装 1803 后，没有打驱动让其自动更新，导致触摸板驱动对于键盘上的按键没反应。重新安装也没有效果，结果一直到现在也没有解决。so,还是看脸···</li>
</ul>
<h2 id="office-与-win-激活"><a href="#office-与-win-激活" class="headerlink" title="office 与 win 激活"></a>office 与 win 激活</h2><p>理论上这个步骤应该在驱动安装完重启之后，因为驱动容易崩。</p>
<h3 id="office"><a href="#office" class="headerlink" title="office"></a>office</h3><p>个人比较喜欢 Office 2016 Professional Plus（名字看上去就跟别人不一样）。</p>
<p>既然装了就选高端点的版本,其实是版本少见，导致激活工具也难找。</p>
<h3 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h3><p>很多激活工具说白了都是服务器，自己也可以搭，但有 180 天限制。<br>但博主并不担心，因为我这台老电脑 win7 升 win10 已经绑定 oem 了，重装也不需要激活系统，只要激活 office 就行了.</p>
<ul>
<li><p>神龙 kms<br>运行前下载最新版并关掉杀软，会报毒，能激活 win 和 office，有广告，传言就三行代码，但无伤大雅且易一发入魂。不过好像也有激活时间限制，看脸。</p>
</li>
<li><p><a href="https://github.com/TGSAN/CMWTAT_Digital_Edition" target="_blank" rel="noopener">数字权利激活</a><br>链接是 GitHub 地址，对没错是开源的！不知道会不会被微软关掉。<br>只能激活 win10 系统，前阵子才出的没用过，一直想抽空找虚拟机试试···</p>
</li>
</ul>
<h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><p>彩蛋：先安装<a href="#佛曰不可说">这个</a></p>
<h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><ul>
<li><a href="https://www.google.com/chrome/" target="_blank" rel="noopener">Chrome</a><br>毫无争议，程序员必备，偶尔因为缓存问题用一下系统自带的 Edge 浏览器</li>
</ul>
<h3 id="UWP"><a href="#UWP" class="headerlink" title="UWP"></a>UWP</h3><p>不得不说，UWP 是微软的败笔。虽然本意是想模仿苹果的 AppStore,但最后还是缺乏管理，导致垃圾应用泛滥。不过，话说回来，有几个还是不错的。</p>
<ul>
<li><p>网易云音乐<br>去除了安装版的笨重、Bug少，虽然不能后台播放，但个人认为这是 UWP 最好的应用，没有之一</p>
</li>
<li><p>有道词典<br>比安装版的好太多，直接复制翻译，还支持文章翻译</p>
</li>
<li><p>中国大学慕课<br>不喜欢看网页的人可以试试这个，还不错</p>
</li>
<li><p>邮件<br>貌似是系统自带的应用，可以收发信，但我偏爱 iOS 上的 QQ 邮箱，没有用电脑处理邮件的习惯。</p>
</li>
</ul>
<h3 id="杀毒"><a href="#杀毒" class="headerlink" title="杀毒"></a>杀毒</h3><p>微软自家的 Windows Defender 已无力吐槽，还是因为是上文提到的 <a href="#UWP">UWP</a> 应用，不稳定极了！装一些破解的时候，明明显示关掉的还是会报毒，加白名单的也报毒···</p>
<p>由于它前身之前用的 Win7 的 MSE 软件，一开始本人对它好感爆棚，逢人推荐。现在因为 UWP 应用的经常抽风，已经换成<a href="https://www.huorong.cn/" target="_blank" rel="noopener">火绒</a>了</p>
<h3 id="播放器"><a href="#播放器" class="headerlink" title="播放器"></a>播放器</h3><ul>
<li><p>PotPlayer<br>解码编码什么的很烦，PotPlayer 一个搞定全部<br>设置在这，reg 直接导入即可</p>
</li>
<li><p>迅雷看看<br>这是绿色安装版，方便迅雷边下边看（虽然破解版的迅雷边看边下的播放器可以自己设置）</p>
</li>
</ul>
<h3 id="压缩管理"><a href="#压缩管理" class="headerlink" title="压缩管理"></a>压缩管理</h3><ul>
<li><p>推荐 <a href="https://www.7-zip.org/7z.html" target="_blank" rel="noopener">7zip</a>，开源免费</p>
</li>
<li><p>我用的 WinRAR，要破解原因是习惯了，下次想尝试使用 7zip</p>
</li>
</ul>
<h3 id="美化工具"><a href="#美化工具" class="headerlink" title="美化工具"></a>美化工具</h3><p><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/草图.png" alt></p>
<p>大概是这样子，可能打码有点影响美观…</p>
<h4 id="软煤雷达"><a href="#软煤雷达" class="headerlink" title="软煤雷达"></a>软煤雷达</h4><p>有点流氓的软件，但是仔细使用并不影响，而且有绿色版</p>
<h4 id="Fence"><a href="#Fence" class="headerlink" title="Fence"></a>Fence</h4><p>桌面图标管理软件，配合 <a href="#Rolan">Rolan</a> 使用效果极佳</p>
<h4 id="Rolan"><a href="#Rolan" class="headerlink" title="Rolan"></a><a href="https://getrolan.com/" target="_blank" rel="noopener">Rolan</a></h4><p>桌面图标管理神器，订阅制。但免费足够了，我发现这个后，再也离不开它，配合 Fence 效果极佳</p>
<h4 id="StartIsBack"><a href="#StartIsBack" class="headerlink" title="StartIsBack"></a>StartIsBack</h4><p>任务栏透明，<del>我用的Startisback 破解版。但据说此软件不适用于最新的win10创意者更新版，会引起很多问题（有一次大版本更新就是因为这个报错了，卸了就好了）推荐下一款</del><br>替代品：<a href="https://github.com/TranslucentTB/TranslucentTB/releases" target="_blank" rel="noopener">TranslucentTB</a></p>
<h3 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h3><h4 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a><a href="https://www.voidtools.com/downloads/" target="_blank" rel="noopener">Everything</a></h4><p>本地搜索软件，好用到爆炸</p>
<h4 id="SumatraPDF"><a href="#SumatraPDF" class="headerlink" title="SumatraPDF"></a><a href="https://www.sumatrapdfreader.org/download.html" target="_blank" rel="noopener">SumatraPDF</a></h4><p>你也可以使用浏览器看，个人喜欢这个轻便简洁的 PDF 阅读器</p>
<h4 id="Prezi"><a href="#Prezi" class="headerlink" title="Prezi"></a>Prezi</h4><p>演示用的工具，说实话第一次见到它的时候惊艳到我了，相当于 Mac 下的 Keynote，同类的还有万彩的办公大师</p>
<p><a href="https://prezi.com/" target="_blank" rel="noopener">演示</a></p>
<h4 id="Picasa"><a href="#Picasa" class="headerlink" title="Picasa"></a><a href="https://picasa.en.softonic.com/?ex=BB-527.1" target="_blank" rel="noopener">Picasa</a></h4><p>没记错的话应该是谷歌的看图软件，Win10 的照片查看器实在太垃圾！</p>
<h4 id="TIM"><a href="#TIM" class="headerlink" title="TIM"></a><a href="https://tim.qq.com/download.html" target="_blank" rel="noopener">TIM</a></h4><p>绿色版 QQ，虽然也开始臃肿了···</p>
<h4 id="WeChat"><a href="#WeChat" class="headerlink" title="WeChat"></a><a href="https://pc.weixin.qq.com/" target="_blank" rel="noopener">WeChat</a></h4><p>这个总不用介绍了吧···</p>
<h4 id="calibre"><a href="#calibre" class="headerlink" title="calibre"></a><a href="https://calibre-ebook.com/download" target="_blank" rel="noopener">calibre</a></h4><p>电子书管理软件，我记得也是全平台吧，貌似还是开源的，很不错,可惜没有在线同步功能，而且我对它需求不大</p>
<h4 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a><a href="https://typora.io/" target="_blank" rel="noopener">Typora</a></h4><p>MarkDown 写作的神器，全平台可以使用，不用介绍，用过的人都说它好用</p>
<h4 id="XMind"><a href="#XMind" class="headerlink" title="XMind"></a>XMind</h4><p>很好用的脑图工具，就是不知道放出破解版以后，思杰马克丁会不会给我发律师函…</p>
<p>不想用破解版的朋友可以考虑一下<a href="#">百度脑图</a>的开源版，全平台的也很不错，就是还有些 Bug</p>
<h4 id="OneDrive"><a href="#OneDrive" class="headerlink" title="OneDrive"></a>OneDrive</h4><p>巨硬自家的东西，随着 Win10 的迭代，他也变得好用了起来。<br><del>什么跟百度网盘比？百度网盘垃圾东西我早就不用了</del>（百度网盘真好用+_+认真脸）<br>PS：OneDrive 学生凭教育邮箱享受 1024GB 的空间哟</p>
<h4 id="Internet-Download-Manager"><a href="#Internet-Download-Manager" class="headerlink" title="Internet Download Manager"></a>Internet Download Manager</h4><p>俗称 IDM，我的主力下载软件，好用到爆炸</p>
<ul>
<li>百度网盘不是下载速度慢么？用油猴抓取真实链接，直接用这玩意下就好了</li>
<li>谷歌浏览器和 Edge 都有 IDM 插件支持，所以除了种子都可以下载</li>
<li>网页上的视频啊音频啊智能抓取也可以下载</li>
</ul>
<h4 id="金山电脑清理"><a href="#金山电脑清理" class="headerlink" title="金山电脑清理"></a>金山电脑清理</h4><p>某大佬的绿色提取版，个人喜好</p>
<h4 id="Ditto"><a href="#Ditto" class="headerlink" title="Ditto"></a><a href="https://ditto-cp.sourceforge.io/" target="_blank" rel="noopener">Ditto</a></h4><p>以前用的 ClipX，重装后换成了这货，体验还行<br>使用见<a href="https://sspai.com/post/43700" target="_blank" rel="noopener">这里</a></p>
<h4 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="VirtualBox"></a><a href="https://www.virtualbox.org/" target="_blank" rel="noopener">VirtualBox</a></h4><p>比 VMware 那妖艳贱货好用那么一丢丢，主要是免费不用破解，占用资源还小，Linux 下也有</p>
<p>不过现在的我不怎么需要了（傲娇脸）</p>
<h4 id="TeamViewer"><a href="#TeamViewer" class="headerlink" title="TeamViewer"></a><a href="https://www.teamviewer.us/downloads/" target="_blank" rel="noopener">TeamViewer</a></h4><p>QQ 那个远程桌面太鸡肋了，会卡，传输和帧率体验极差</p>
<p>既然要给妹子修电脑，好一点的远程桌面软件是你需要的（滑稽</p>
<h4 id="有道云笔记"><a href="#有道云笔记" class="headerlink" title="有道云笔记"></a><a href="https://note.youdao.com/" target="_blank" rel="noopener">有道云笔记</a></h4><p>记笔记的，签到获取容量</p>
<h3 id="艺术处理"><a href="#艺术处理" class="headerlink" title="艺术处理"></a>艺术处理</h3><p>曾经一口气装了会声会影、爱剪辑、Vegas、AE、PR、PS、AI 等软件，后来发现只学会了 PR 和 PS</p>
<h4 id="Adobe"><a href="#Adobe" class="headerlink" title="Adobe"></a>Adobe</h4><p>这里就不介绍了可以在 U盘 上直接运行，直接甩<a href="https://pan.baidu.com/s/18Q5ulT59ro70XK_V6mM8Jw" target="_blank" rel="noopener">提取码 8m36</a></p>
<h4 id="格式工厂"><a href="#格式工厂" class="headerlink" title="格式工厂"></a><a href="http://www.pcgeshi.com/" target="_blank" rel="noopener">格式工厂</a></h4><p>转化音频的软件，安装需要小心勾选流氓软件</p>
<h3 id="编程代码"><a href="#编程代码" class="headerlink" title="编程代码"></a>编程代码</h3><p>个人的编程环境搭建</p>
<h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a></h4><p>不需要解释吧代码管理工具</p>
<h4 id="Node-JS"><a href="#Node-JS" class="headerlink" title="Node.JS"></a><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.JS</a></h4><ul>
<li>Hexo<br>顺便把博客环境搭了</li>
</ul>
<h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p><a href="https://www.java.com/download/" target="_blank" rel="noopener">Java</a> 环境肯定要有···</p>
<h4 id="Intellij-IDEA"><a href="#Intellij-IDEA" class="headerlink" title="Intellij IDEA"></a><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">Intellij IDEA</a></h4><p>学生党就不破解了···教程在<a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial" target="_blank" rel="noopener">此</a></p>
<h4 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a><a href="http://www.eclipse.org/downloads/packages/release/kepler/sr1/eclipse-ide-java-developers" target="_blank" rel="noopener">Eclipse</a></h4><p>不是很想装···</p>
<h4 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h4><p>安装见<a href="https://yi-yun.github.io/Android-Studio-%E5%AE%89%E8%A3%85/">这篇文章</a></p>
<h4 id="Dev-C"><a href="#Dev-C" class="headerlink" title="Dev-C++"></a><a href="https://sourceforge.net/projects/orwelldevcpp/" target="_blank" rel="noopener">Dev-C++</a></h4><p>写 C 和 C++ 的 IDE,逢问必推荐这款</p>
<p>什么？VC6.0++？拜托这都 8012 年了，还用远古工具</p>
<p>什么？Visual Studio？算了太大···不适合新手</p>
<p>相信我入门 C语言 选这款，你不会后悔的这玩意好久没用了，要不是今天写文章还想不起来</p>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a><a href="https://www.python.org/downloads/" target="_blank" rel="noopener">Python</a></h4><p>这个肯定要装.jpg，别手贱去装 Anaconda 这玩意</p>
<h4 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a><a href="https://code.visualstudio.com/download" target="_blank" rel="noopener">Visual Studio Code</a></h4><p>写项目文件好用到爆炸，还有丰富的插件</p>
<h4 id="Notepad"><a href="#Notepad" class="headerlink" title="Notepad++"></a><a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener">Notepad++</a></h4><p>不想用自带的文本编辑器，相比楼上那个 Visual Studio Code，这东西启动快</p>
<h3 id="开源工具"><a href="#开源工具" class="headerlink" title="开源工具"></a>开源工具</h3><h4 id="数字权利激活"><a href="#数字权利激活" class="headerlink" title="数字权利激活"></a><a href="https://github.com/TGSAN/CMWTAT_Digital_Edition" target="_blank" rel="noopener">数字权利激活</a></h4><p><a href="#激活">上文</a>提到过</p>
<h4 id="录屏工具"><a href="#录屏工具" class="headerlink" title="录屏工具"></a><a href="https://github.com/NickeManarin/ScreenToGif" target="_blank" rel="noopener">录屏工具</a></h4><h4 id="离线文档浏览"><a href="#离线文档浏览" class="headerlink" title="离线文档浏览"></a><a href="https://github.com/zealdocs/zeal" target="_blank" rel="noopener">离线文档浏览</a></h4><h4 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a></h4><p>极好用的图床工具，羡慕会 Electron 的大佬</p>
<h4 id="Putty"><a href="#Putty" class="headerlink" title="Putty"></a><a href="https://www.putty.org/" target="_blank" rel="noopener">Putty</a></h4><p>SSH 登录</p>
<h4 id="WinSCP"><a href="#WinSCP" class="headerlink" title="WinSCP"></a><a href="https://winscp.net/eng/download.php" target="_blank" rel="noopener">WinSCP</a></h4><p>Windows 与 Linux 之间互传文件</p>
<h4 id="proxyee-down"><a href="#proxyee-down" class="headerlink" title="proxyee-down"></a><a href="https://github.com/proxyee-down-org/proxyee-down" target="_blank" rel="noopener">proxyee-down</a></h4><p>百度网盘下载</p>
<h4 id="rufus"><a href="#rufus" class="headerlink" title="rufus"></a><a href="https://rufus.akeo.ie/" target="_blank" rel="noopener">rufus</a></h4><p>U 盘刻录工具，装 Linux 系统会用到</p>
<h4 id="佛曰不可说"><a href="#佛曰不可说" class="headerlink" title="佛曰不可说"></a><a href="https://github.com/iMeiji/shadowsocks_install/wiki/shadowsocks-libev-%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85" target="_blank" rel="noopener">佛曰不可说</a></h4><h2 id="下载地址（点此下载）"><a href="#下载地址（点此下载）" class="headerlink" title="下载地址（点此下载）"></a><a href="https://caomsacid0-my.sharepoint.com/:f:/g/personal/yi-yun_caoms_ac_id/EqIjMtarICtHmVzGmrezX4wBGx5L1OWlpfsmzmBa31YgqQ?e=7h0s2T" target="_blank" rel="noopener">下载地址</a>（点此下载）</h2>]]></content>
      <categories>
        <category>win 配置</category>
      </categories>
      <tags>
        <tag>奇淫怪技</tag>
        <tag>配置笔记</tag>
        <tag>软件</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>爬坑指南（二）</title>
    <url>/%E5%9F%BA%E4%BA%8E%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%9B%B4%E6%96%B0%E7%89%88/</url>
    <content><![CDATA[<p align="center"><br>  <img src="https://i.loli.net/2018/07/22/5b542f5c58d76.jpg" alt="IMG_5686.jpg" title="IMG_5686.jpg" width="250"><br></p>

<p>对该项目不了解的朋友可先阅读<a href="https://yi-yun.github.io/%E7%88%AC%E5%9D%91%E6%8C%87%E5%8D%97/">爬坑指南（一）</a></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>因为系统开发与设计需要提交个人作业，但说来惭愧，手头上没有拿的出来的作品，只能将树莓派机器人交上去。</p>
<p>不看还好，一看吓一跳，图灵 API 失效，点歌功能失效，我还把物联网的器件交给了老师···看样子要更新代码不是一件很容易的事啊。事实证明，果然如此，这次相当于我基于原来的框架又重新写了一遍<br><a id="more"></a></p>
<h2 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明"></a>更新说明</h2><h3 id="图灵机器人-V2-0"><a href="#图灵机器人-V2-0" class="headerlink" title="图灵机器人 V2.0"></a><a href="https://www.kancloud.cn/turing/www-tuling123-com/718227" target="_blank" rel="noopener">图灵机器人 V2.0</a></h3><p>这里是个大坑，让我头疼了很久，在这耗费了大量时间</p>
<ul>
<li><p>坑一：格式<br>更新后的图灵机器人在命令行中要采用 <code>POST</code> 方式， <code>JSON</code> 的参数这样的形式才生效<br><img src="https://yiyun-1253940215.cos.ap-shanghai.myqcloud.com/20180926124330.png" alt><br>这么复杂的东西，不复制到代码里然后修改很容易出错</p>
</li>
<li><p>坑二：返回参数<br>看下面这段代码，不经过测试，鬼知道怎么读取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">       res = requests.post(url=apiUrl, data=json.dumps(data))</span><br><span class="line">       b = res.json()</span><br><span class="line">       print(b)</span><br><span class="line">       <span class="keyword">return</span> b[<span class="string">'results'</span>][<span class="number">0</span>][<span class="string">'values'</span>][b[<span class="string">'results'</span>][<span class="number">0</span>][<span class="string">'resultType'</span>]]       </span><br><span class="line">   <span class="keyword">except</span> Exception:</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"我无法理解【%s】的含义"</span> % msg</span><br></pre></td></tr></table></figure>
</li>
<li><p>坑三：原来的机器人不能用<br>官网没有任何提示（可能有，反正我没看到）我一直再用老版本机器人，提示加密方式错误，提交反馈也没人理我，网站还用的 <code>http</code>。<br>一开始我以为是实名认证的锅，提交了身份认证，足足让我等了两个礼拜才通过？！通过后仍然报错，摸索了很久，试了很多方法，一气之下新建机器人才算搞定<br><strong>总之，用图灵机器人 <code>V2.0</code> 的 <code>API</code> 一定要新建机器人</strong></p>
</li>
</ul>
<h3 id="点歌播放"><a href="#点歌播放" class="headerlink" title="点歌播放"></a>点歌播放</h3><p>也就三个月，小豆机器人的点歌 API 失效了.无奈只好重新寻找，皇天不负有心人，<del>在经过一日一夜的寻找</del>，在某网站发现了老版网易云的根据歌名得到 <code>ID</code> 的链接，得到 <code>ID</code> 就可以拼接链接，用 <code>mplayer</code> 播放</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_musicurl</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = <span class="string">'http://s.music.163.com/search/get/?src=lofter&amp;type=1&amp;filterDj=true&amp;s='</span>+text+<span class="string">'&amp;limit=2&amp;offset=0&amp;callback=loft.w.g.cbFuncSearchMusic'</span></span><br><span class="line">        res = requests.get(url)</span><br><span class="line">        j = json.loads(res.text[<span class="number">27</span>:<span class="number">-1</span>])</span><br><span class="line">        id = j[<span class="string">'result'</span>][<span class="string">'songs'</span>][<span class="number">0</span>][<span class="string">'id'</span>]</span><br><span class="line">        _url = <span class="string">'http://music.163.com/song/media/outer/url?id='</span>+str(id)+<span class="string">'.mp3'</span></span><br><span class="line">        <span class="keyword">return</span> _url</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我找不到歌名【%s】"</span> % text</span><br></pre></td></tr></table></figure>
<h3 id="图床功能"><a href="#图床功能" class="headerlink" title="图床功能"></a>图床功能</h3><p>博客嘛，图床是不可避免的。但是 iOS 只有 SM.MS，没有腾讯云的对象存储。有了需求，加上官网上的<a href="https://cloud.tencent.com/document/product/436" target="_blank" rel="noopener">文档</a>，功能就出来了。不过环境需要在本地配置。当然也可以将相关的密钥参数用模块的形式导入</p>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>去除了原先冗杂的抛异常代码以及小豆机器人失效的功能，使功能更加健全</p>
<p>例如可以输入 <code>明天杭州到武汉的火车</code> 查询相关信息</p>
<h2 id="项目总结"><a href="#项目总结" class="headerlink" title="项目总结"></a>项目总结</h2><p><a href="https://github.com/yi-yun/raspi-chatrobot" target="_blank" rel="noopener">项目地址</a>(将原有的分支改为主分支，<code>master</code> 变为副分支)</p>
<p>其实正确的做法应该在原来的基础上新建分支然后合并，而不是在本地上更改完以后提交代码，有所欠缺。</p>
]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
        <tag>聊天机器人</tag>
        <tag>微信</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio 安装</title>
    <url>/Android-Studio-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p align="center"><br>  <img src="https://i.loli.net/2018/08/15/5b73a619714be.jpg" alt="IMG_5686.jpg" title="IMG_5686.jpg" class="full-image" width="650/"><br></p>


<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前重新安装了双系统，装完怎么能没有 Android Studio 这个神器呢？<br>但博主是个强迫症的人，一般软件不喜欢安装在 C 盘，最主要的原因是 C 盘空间初始分的太小，加上 Windows 的尿性，天天更新之类少空间就很头疼，所以应该尽可能减少占用 C 盘的空间。</p>
<a id="more"></a>
<h2 id="配置-Java-环境"><a href="#配置-Java-环境" class="headerlink" title="配置 Java 环境"></a>配置 Java 环境</h2><p>这里我装的是 Java 8 的环境，配置环境对于老手来说手到擒来。<del>我不会告诉你们我配的时候去网上看了遍教程……</del></p>
<h2 id="下载-Android-Studio"><a href="#下载-Android-Studio" class="headerlink" title="下载 Android Studio"></a>下载 Android Studio</h2><p>很多人推荐去<a href="https://developer.android.com/studio/" target="_blank" rel="noopener">官网</a>下，这是最新的（可能有老版的，但我没找到），但 3.1 以上的版本我记得没有 Android Monitor，而且可能访问速度不够快，最好有个梯子，个人不是很推荐</p>
<p>我是去<a href="http://www.androiddevtools.cn/" target="_blank" rel="noopener">这里</a>下的，点开页面惊不惊喜？竟然是中文的！你也可以直接在此页面点<a href="https://dl.google.com/dl/android/studio/install/3.0.1.0/android-studio-ide-171.4443003-windows.exe?utm_source=androiddevtools&amp;utm_medium=website" target="_blank" rel="noopener">链接</a>下载 Android Studio 3.0.1.exe 安装程序</p>
<h2 id="安装-Android-Studio"><a href="#安装-Android-Studio" class="headerlink" title="安装 Android Studio"></a>安装 Android Studio</h2><p>更改安装路径，一路 next 即可</p>
<h3 id="配置-Android-Studio（重要）"><a href="#配置-Android-Studio（重要）" class="headerlink" title="配置 Android Studio（重要）"></a>配置 Android Studio（重要）</h3><h3 id="选择-Custom"><a href="#选择-Custom" class="headerlink" title="选择 Custom"></a>选择 Custom</h3><p>选择 Standard 模式可能更改不了路径</p>
<h3 id="取消勾选-Android-Virtual-Device"><a href="#取消勾选-Android-Virtual-Device" class="headerlink" title="取消勾选 Android Virtual Device"></a>取消勾选 Android Virtual Device</h3><p>顾名思义安卓虚拟机，调试用的个人不喜欢安装这玩意，原因有很多：</p>
<ul>
<li>占用空间只能装在 C 盘的</li>
<li>我有淘汰的 Android 手机</li>
<li>没有域名映射，调试的时候有点问题</li>
<li>实在不行，可以用夜神模拟器代替</li>
</ul>
<p>总之，我就算是死也不会装的！<del>真香</del></p>
<h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><p>主要移动的是用户目录下的以下文件<img src="https://i.loli.net/2018/08/18/5b77837e050c8.png" alt="文件目录"></p>
<h4 id="更改-gradle-目录"><a href="#更改-gradle-目录" class="headerlink" title="更改 gradle 目录"></a>更改 gradle 目录</h4><p>打开 AS 的 setting，进行相关设置</p>
<p><img src="https://i.loli.net/2018/08/18/5b7784e690ba4.png" alt></p>
<h4 id="更改-Android-Studio-配置相关目录"><a href="#更改-Android-Studio-配置相关目录" class="headerlink" title="更改 Android Studio 配置相关目录"></a>更改 Android Studio 配置相关目录</h4><p>进入 Android Studio 安装位置，比如我安装在了<code>D:\Android Studio</code>，找到<code>D:\Android Studio\bin\idea.properties</code></p>
<p>更改配置文件，将两个路径更改为自己喜欢的路径，如图</p>
<p><img src="https://i.loli.net/2018/08/18/5b77866f6a904.png" alt></p>
<p>更改完保存重启即可</p>
]]></content>
      <categories>
        <category>win 配置</category>
      </categories>
      <tags>
        <tag>Android Studio 安装配置</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>爬坑指南（一）</title>
    <url>/%E7%88%AC%E5%9D%91%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p align="center"><br>  <img src="https://i.loli.net/2018/07/22/5b542f5c58d76.jpg" alt="IMG_5686.jpg" title="IMG_5686.jpg" width="250"><br></p>



<p>在大一计算机导论课的时候，老师演示了用 APP 控制 LED 灯的系统，当时觉得很极客。脑海中就幻想，在九点下班的路上，在微信对话框内输入<code>打开空调</code>，回到家后就能享受迎面而来的凉风……而这一切都是你自己搭建的，那是多么美妙的事情！</p>
<h3 id="相关背景"><a href="#相关背景" class="headerlink" title="相关背景"></a>相关背景</h3><p>很早之前，学长送了我一个树莓派作为社团留任礼物。一直想愉快地玩耍，却迟迟不得空。 2018 年寒假终于感受到了嵌入式的魅力。有了寒假折腾的基础（折腾过程可能后续会写到博客），到了嵌入式系统开发的课程，<del>为了大作业</del>（其实还是自己想折腾）做了一个基于树莓派的微信机器人。<br><a id="more"></a></p>
<h3 id="具体实施"><a href="#具体实施" class="headerlink" title="具体实施"></a>具体实施</h3><p>跟着脑海中的思路先画了思维导图<br><img src="https://i.loli.net/2018/07/22/5b5469d3cce66.png" alt></p>
<ul>
<li><p><strong>模块采用</strong><br>查阅资料后，了解到微信机器人 python 模块流行的有两种：itchat 和 wxpy。初步比较后采用 itchat，原因是wxpy是在itchat上改的。从某种意义上来说，itchat 更原始一点。<br><a href="http://itchat.readthedocs.io/zh/latest/" target="_blank" rel="noopener">itchat 官方文档</a><br>例：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@itchat.msg_register(TEXT)  #处理对话框内的消息先根据消息类型进行注册</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">text_reply</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> Chat.has_music(msg[<span class="string">'Text'</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>自动回复</strong><br>回复对话需要相应的 API 支持，最常见的是图灵机器人（<del>个人觉得是名字取得好才常见</del>）。本项目用到的还有小豆机器人的 API 。<br>国外还有被谷歌收购的 api.ai ，基于机器学习，有时间的话可以研究一下。<br>例：小豆机器人注册账号得到相应的 Key 后可在浏览器打开<a href="http://api.douqq.com/?key=Rzd5bW49Mj0vZ09hbmh0MEJ1VENReGdWd2hZQUFBPT0&amp;msg=什么是物联网" target="_blank" rel="noopener">链接</a>（这里用的是我的 key）<br>同理图灵机器人也会有相应的 Key，以<code>res = requests.post(apiUrl, data=data).json()</code>的代码方式（需要以 json 格式）请求数据，然后得到结果<code>title = res.get(&#39;text&#39;)</code></p>
</li>
<li><p><strong>控制 LED</strong><br>对于了解过树莓派 GPIO 的人来说很简单。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO  <span class="comment">#引入模块</span></span><br><span class="line">pin=<span class="number">17</span>  <span class="comment">#设置引脚</span></span><br><span class="line">GPIO.setmode(GPIO.BCM)  <span class="comment">#设置BCM模式</span></span><br><span class="line">GPIO.setup(pin,GPIO.OUT)  <span class="comment">#初始化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on</span><span class="params">()</span>:</span></span><br><span class="line">    GPIO.output(pin,<span class="literal">True</span>)   <span class="comment">#高电平开</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">off</span><span class="params">()</span>:</span></span><br><span class="line">    GPIO.output(pin,<span class="literal">False</span>)   <span class="comment">#低电平关</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>天气爬取</strong><br>室外天气爬取的是墨迹天气，参考的是<a href="https://zhuanlan.zhihu.com/p/24983204" target="_blank" rel="noopener">树莓派语音闹钟</a><br>这里用到的<a href="http://tts.baidu.com/text2audio?idx=1&amp;tex=%E5%9F%BA%E4%BA%8E%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA&amp;cuid=baidu_speech_demo&amp;cod=2&amp;lan=zh&amp;ctp=1&amp;pdt=1&amp;spd=5&amp;per=4&amp;vol=5&amp;pit=5" target="_blank" rel="noopener">百度 API </a>很有意思，关于语音类的以后可能还会用到<br>因为还有 DHT11 模块获取室内温湿度，所以在原来基础的代码上又加了一些代码</p>
</li>
<li><strong>点歌播放</strong><br>  首先要有音乐播放器<code>sudo apt-get install mplayer</code>，这里用到的是 mplayer，后面直接跟链接就能播放<br>  有了播放器后，接下来是音乐链接了。这里是最苦恼我的地方。几个月前在网上找了很多教程。Linux 相关的最出名的就是网易云音乐了。所以先找的是网易云音乐，什么 Node.js 版，CLI 下的等等，有的功能太全需要登陆，有的不符合要求······总之，均不满意。<br>  后来无意中浏览小豆机器人功能列表时发现了这货竟然提供点歌播放，迅速输入连接获取的是一串文字，用正则表达式匹配后，竟然成功点歌播放了。只是因为采用的是 HTTP 协议，歌名不能有空格。<del>大作业演示的时候不输空格就好了，总比没有好</del><br>  有了链接后，还需多线程停止播放，不然你得听完整首歌才能开灯，太 Low 了！<br>  代码如下:  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">has_music</span><span class="params">(text)</span>:</span></span><br><span class="line">thre=threading.Thread();</span><br><span class="line"><span class="keyword">if</span> text[<span class="number">0</span>].__eq__(<span class="string">"点"</span>) <span class="keyword">and</span> text[<span class="number">1</span>].__eq__(<span class="string">"歌"</span>):</span><br><span class="line">    reply = Tuling.get_response(text)</span><br><span class="line">    pattern=re.compile(<span class="string">r'http://zhangmenshiting.*'</span>)</span><br><span class="line">    url=re.findall(pattern,reply)</span><br><span class="line">    url=url[<span class="number">0</span>][<span class="number">0</span>:<span class="number">-1</span>]</span><br><span class="line">    thre=threading.Thread(target=play,args=[url])</span><br><span class="line">    thre.start()</span><br><span class="line"><span class="keyword">elif</span> text.__contains__(<span class="string">"停止"</span>):</span><br><span class="line">    os.system(<span class="string">'killall -9 mplayer'</span> )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> deng(text)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="项目总结"><a href="#项目总结" class="headerlink" title="项目总结"></a>项目总结</h3><p><a href="https://github.com/yi-yun/raspi-chatrobot" target="_blank" rel="noopener">项目地址</a><br>可能因为第一次做项目的关系，略显得有点稚嫩。不仅体现在代码上，还在工作流上有问题。后来静下心来，用思维导图重新梳理了思路，打了草稿，一切都迎刃而解。<br>欢迎各位看官提出各种见解和建议！</p>
]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
        <tag>聊天机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>陌上花开</title>
    <url>/%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2018/07/22/5b543ab189014.png" class="full-image"></p>
<hr>
<blockquote>
<p>陌上花开，可缓缓归矣。</p>
</blockquote>
<p>第一次知道这句话是在初二，是一位好友的 QQ 昵称。转眼六载有余，当时可曾想这句话会成为我人生中第一个博客的开篇句。<br><a id="more"></a><br>这句话的意思大致是夫君想念妻子，希望妻子早点从娘家回来，但显然我并没有那么煽情。博客引用这句话意在自勉，希望不再自甘堕落，找回自我。</p>
<p>最近浏览大佬博客，看到了“人为什么活着”。这个问题每个人的每个阶段有不同的理解。现在的我为了学习，学好了为了什么？为了能找工作？找到工作为了什么？为了人活着。</p>
<p>也许那个时候又会问自己人活着为了什么？我会答，为了去做自己最喜欢做的事情，也是我 GitHub 的 bio “Do Your Favorites ”，真正做到的又有几个呢？没有人会告诉你也不能告诉你死后会怎么样，无神论，有神论？谁知道呢。Enjoy now enough!</p>
<h3 id="博客目的"><a href="#博客目的" class="headerlink" title="博客目的"></a>博客目的</h3><ul>
<li>输出提升<br>一月前加入了某大佬的知识星球，真的感触颇多，每天的分享，仿佛大家都在努力奋斗，而只有自己堕落在寝室中，无所事事……终于下定决心开个博客，写点东西，总比在寝室里睡觉看视频强。</li>
<li>查询笔记<br>不久前，重装了 win10 系统，又重新配了各种环境，教程网上一通搜索……更折腾的是，有大神推荐我 Arch Linux，因为涉及到双系统，装了七八遍，也是官方 wiki 以及各种教程乱找，用多方版本成功体验。最后终于受不了，决定有一个适合自己的笔记博客。当然期待与各位看官的共同进步！</li>
</ul>
<h3 id="选择平台"><a href="#选择平台" class="headerlink" title="选择平台"></a>选择平台</h3><ul>
<li>你为什么选这里？为什么呢？<br>因为穷…自己的博客需要云主机、域名，哦，对了还有那个恼人的备案。其实主要是云主机，学生机每个月十块钱（其实不贵），但加上 VPS 每个月三十，个人认为不是很值。虽然“免费的是最贵的”，但显然 GitHub Pages 托管的博客要排除在外。</li>
<li>既然你有 VPS ，为什么不搭 VPS 上呢<br><del>还是因为穷</del>…开个玩笑，VPS 主机在旧金山，Ping 延迟过高，加上不想耦合太紧（就像代码一样）。如果我关 VPS 的话，要考虑博客等，过于麻烦。</li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>关于我</tag>
      </tags>
  </entry>
</search>
